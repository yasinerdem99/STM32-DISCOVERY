
005_5_HAL_MULT_ADC_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002250  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080023d8  080023d8  000123d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e8  080023e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080023e8  080023e8  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023f0  080023f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023f0  080023f0  000123f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023f4  080023f4  000123f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000065d9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014e4  00000000  00000000  00026615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000598  00000000  00000000  00027b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004f0  00000000  00000000  00028098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020398  00000000  00000000  00028588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006e00  00000000  00000000  00048920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8cec  00000000  00000000  0004f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011840c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001538  00000000  00000000  0011845c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023c0 	.word	0x080023c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080023c0 	.word	0x080023c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

	if(__HAL_ADC_GET_FLAG(&hadc1,ADC_FLAG_EOC)!=RESET){
 80004d4:	4b4d      	ldr	r3, [pc, #308]	; (800060c <HAL_ADC_ConvCpltCallback+0x140>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f003 0302 	and.w	r3, r3, #2
 80004de:	2b02      	cmp	r3, #2
 80004e0:	d16c      	bne.n	80005bc <HAL_ADC_ConvCpltCallback+0xf0>

		adc1_value[count]= HAL_ADC_GetValue(&hadc1);
 80004e2:	484a      	ldr	r0, [pc, #296]	; (800060c <HAL_ADC_ConvCpltCallback+0x140>)
 80004e4:	f000 fde4 	bl	80010b0 <HAL_ADC_GetValue>
 80004e8:	4602      	mov	r2, r0
 80004ea:	4b49      	ldr	r3, [pc, #292]	; (8000610 <HAL_ADC_ConvCpltCallback+0x144>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	b291      	uxth	r1, r2
 80004f0:	4a48      	ldr	r2, [pc, #288]	; (8000614 <HAL_ADC_ConvCpltCallback+0x148>)
 80004f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		count++;
 80004f6:	4b46      	ldr	r3, [pc, #280]	; (8000610 <HAL_ADC_ConvCpltCallback+0x144>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	3301      	adds	r3, #1
 80004fc:	4a44      	ldr	r2, [pc, #272]	; (8000610 <HAL_ADC_ConvCpltCallback+0x144>)
 80004fe:	6013      	str	r3, [r2, #0]
		if(count==3)
 8000500:	4b43      	ldr	r3, [pc, #268]	; (8000610 <HAL_ADC_ConvCpltCallback+0x144>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b03      	cmp	r3, #3
 8000506:	d102      	bne.n	800050e <HAL_ADC_ConvCpltCallback+0x42>
			count=0;
 8000508:	4b41      	ldr	r3, [pc, #260]	; (8000610 <HAL_ADC_ConvCpltCallback+0x144>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
		Vdda=(float)3.3 * (*VREFIN_CAL) / adc1_value[1];
 800050e:	4b42      	ldr	r3, [pc, #264]	; (8000618 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	ee07 3a90 	vmov	s15, r3
 8000516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800051a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800061c <HAL_ADC_ConvCpltCallback+0x150>
 800051e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <HAL_ADC_ConvCpltCallback+0x148>)
 8000524:	885b      	ldrh	r3, [r3, #2]
 8000526:	ee07 3a90 	vmov	s15, r3
 800052a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800052e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000536:	ee17 2a90 	vmov	r2, s15
 800053a:	4b39      	ldr	r3, [pc, #228]	; (8000620 <HAL_ADC_ConvCpltCallback+0x154>)
 800053c:	601a      	str	r2, [r3, #0]
		Vadc1=Vdda * adc1_value[0] / 4095;
 800053e:	4b35      	ldr	r3, [pc, #212]	; (8000614 <HAL_ADC_ConvCpltCallback+0x148>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	4b36      	ldr	r3, [pc, #216]	; (8000620 <HAL_ADC_ConvCpltCallback+0x154>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	fb02 f303 	mul.w	r3, r2, r3
 800054c:	4a35      	ldr	r2, [pc, #212]	; (8000624 <HAL_ADC_ConvCpltCallback+0x158>)
 800054e:	fb82 1203 	smull	r1, r2, r2, r3
 8000552:	441a      	add	r2, r3
 8000554:	12d2      	asrs	r2, r2, #11
 8000556:	17db      	asrs	r3, r3, #31
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	ee07 3a90 	vmov	s15, r3
 800055e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <HAL_ADC_ConvCpltCallback+0x15c>)
 8000564:	edc3 7a00 	vstr	s15, [r3]
		Vsense=Vdda * adc1_value[2] / 4095;
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <HAL_ADC_ConvCpltCallback+0x148>)
 800056a:	889b      	ldrh	r3, [r3, #4]
 800056c:	461a      	mov	r2, r3
 800056e:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <HAL_ADC_ConvCpltCallback+0x154>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	fb02 f303 	mul.w	r3, r2, r3
 8000576:	4a2b      	ldr	r2, [pc, #172]	; (8000624 <HAL_ADC_ConvCpltCallback+0x158>)
 8000578:	fb82 1203 	smull	r1, r2, r2, r3
 800057c:	441a      	add	r2, r3
 800057e:	12d2      	asrs	r2, r2, #11
 8000580:	17db      	asrs	r3, r3, #31
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	ee07 3a90 	vmov	s15, r3
 8000588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <HAL_ADC_ConvCpltCallback+0x160>)
 800058e:	edc3 7a00 	vstr	s15, [r3]
		temperature= ((Vsense-V25)/Avg_slope) +25;
 8000592:	4b26      	ldr	r3, [pc, #152]	; (800062c <HAL_ADC_ConvCpltCallback+0x160>)
 8000594:	edd3 7a00 	vldr	s15, [r3]
 8000598:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000630 <HAL_ADC_ConvCpltCallback+0x164>
 800059c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80005a0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8000634 <HAL_ADC_ConvCpltCallback+0x168>
 80005a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005a8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80005ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005b4:	ee17 2a90 	vmov	r2, s15
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <HAL_ADC_ConvCpltCallback+0x16c>)
 80005ba:	601a      	str	r2, [r3, #0]

	}
	if(__HAL_ADC_GET_FLAG(&hadc2,ADC_FLAG_EOC)!=RESET){
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <HAL_ADC_ConvCpltCallback+0x170>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d11b      	bne.n	8000602 <HAL_ADC_ConvCpltCallback+0x136>
		adc2_value=HAL_ADC_GetValue(&hadc2);
 80005ca:	481c      	ldr	r0, [pc, #112]	; (800063c <HAL_ADC_ConvCpltCallback+0x170>)
 80005cc:	f000 fd70 	bl	80010b0 <HAL_ADC_GetValue>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <HAL_ADC_ConvCpltCallback+0x174>)
 80005d6:	801a      	strh	r2, [r3, #0]

		Vadc2=Vdda*adc2_value / 4095;
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_ADC_ConvCpltCallback+0x174>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_ADC_ConvCpltCallback+0x154>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	fb02 f303 	mul.w	r3, r2, r3
 80005e6:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <HAL_ADC_ConvCpltCallback+0x158>)
 80005e8:	fb82 1203 	smull	r1, r2, r2, r3
 80005ec:	441a      	add	r2, r3
 80005ee:	12d2      	asrs	r2, r2, #11
 80005f0:	17db      	asrs	r3, r3, #31
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	ee07 3a90 	vmov	s15, r3
 80005f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_ADC_ConvCpltCallback+0x178>)
 80005fe:	edc3 7a00 	vstr	s15, [r3]

	}
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000048 	.word	0x20000048
 8000610:	20000044 	.word	0x20000044
 8000614:	20000028 	.word	0x20000028
 8000618:	0fff7a2a 	.word	0x0fff7a2a
 800061c:	40533333 	.word	0x40533333
 8000620:	2000003c 	.word	0x2000003c
 8000624:	80080081 	.word	0x80080081
 8000628:	20000030 	.word	0x20000030
 800062c:	20000038 	.word	0x20000038
 8000630:	3f428f5c 	.word	0x3f428f5c
 8000634:	3b23d70a 	.word	0x3b23d70a
 8000638:	20000040 	.word	0x20000040
 800063c:	20000090 	.word	0x20000090
 8000640:	2000002e 	.word	0x2000002e
 8000644:	20000034 	.word	0x20000034

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 fa8c 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f812 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f93a 	bl	80008cc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000658:	f000 f878 	bl	800074c <MX_ADC1_Init>
  MX_ADC2_Init();
 800065c:	f000 f8e4 	bl	8000828 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc1);
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <main+0x28>)
 8000662:	f000 fb37 	bl	8000cd4 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <main+0x2c>)
 8000668:	f000 fb34 	bl	8000cd4 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x24>
 800066e:	bf00      	nop
 8000670:	20000048 	.word	0x20000048
 8000674:	20000090 	.word	0x20000090

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fe92 	bl	80023b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	; (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xd0>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e8:	2308      	movs	r3, #8
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ec:	23a8      	movs	r3, #168	; 0xa8
 80006ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 f9cf 	bl	8001aa0 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000708:	f000 f908 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000718:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2105      	movs	r1, #5
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fc30 	bl	8001f90 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000736:	f000 f8f1 	bl	800091c <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800075e:	4b2f      	ldr	r3, [pc, #188]	; (800081c <MX_ADC1_Init+0xd0>)
 8000760:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <MX_ADC1_Init+0xd4>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000764:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_ADC1_Init+0xd0>)
 8000766:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800076a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076c:	4b2b      	ldr	r3, [pc, #172]	; (800081c <MX_ADC1_Init+0xd0>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000772:	4b2a      	ldr	r3, [pc, #168]	; (800081c <MX_ADC1_Init+0xd0>)
 8000774:	2201      	movs	r2, #1
 8000776:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <MX_ADC1_Init+0xd0>)
 800077a:	2201      	movs	r2, #1
 800077c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_ADC1_Init+0xd0>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_ADC1_Init+0xd0>)
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	4b23      	ldr	r3, [pc, #140]	; (800081c <MX_ADC1_Init+0xd0>)
 800078e:	4a25      	ldr	r2, [pc, #148]	; (8000824 <MX_ADC1_Init+0xd8>)
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0xd0>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_ADC1_Init+0xd0>)
 800079a:	2203      	movs	r2, #3
 800079c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_ADC1_Init+0xd0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_ADC1_Init+0xd0>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ac:	481b      	ldr	r0, [pc, #108]	; (800081c <MX_ADC1_Init+0xd0>)
 80007ae:	f000 fa4d 	bl	8000c4c <HAL_ADC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007b8:	f000 f8b0 	bl	800091c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007bc:	2300      	movs	r3, #0
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80007c4:	2303      	movs	r3, #3
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	4813      	ldr	r0, [pc, #76]	; (800081c <MX_ADC1_Init+0xd0>)
 80007ce:	f000 fc91 	bl	80010f4 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007d8:	f000 f8a0 	bl	800091c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80007dc:	2311      	movs	r3, #17
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_ADC1_Init+0xd0>)
 80007ea:	f000 fc83 	bl	80010f4 <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007f4:	f000 f892 	bl	800091c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007f8:	2310      	movs	r3, #16
 80007fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007fc:	2303      	movs	r3, #3
 80007fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_ADC1_Init+0xd0>)
 8000806:	f000 fc75 	bl	80010f4 <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000810:	f000 f884 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000048 	.word	0x20000048
 8000820:	40012000 	.word	0x40012000
 8000824:	0f000001 	.word	0x0f000001

08000828 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	463b      	mov	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <MX_ADC2_Init+0x98>)
 800083c:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <MX_ADC2_Init+0x9c>)
 800083e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_ADC2_Init+0x98>)
 8000842:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000846:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_ADC2_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_ADC2_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_ADC2_Init+0x98>)
 8000856:	2201      	movs	r2, #1
 8000858:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_ADC2_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_ADC2_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_ADC2_Init+0x98>)
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <MX_ADC2_Init+0xa0>)
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_ADC2_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_ADC2_Init+0x98>)
 8000876:	2201      	movs	r2, #1
 8000878:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_ADC2_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_ADC2_Init+0x98>)
 8000884:	2201      	movs	r2, #1
 8000886:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_ADC2_Init+0x98>)
 800088a:	f000 f9df 	bl	8000c4c <HAL_ADC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000894:	f000 f842 	bl	800091c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000898:	2301      	movs	r3, #1
 800089a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800089c:	2301      	movs	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80008a0:	2303      	movs	r3, #3
 80008a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_ADC2_Init+0x98>)
 80008aa:	f000 fc23 	bl	80010f4 <HAL_ADC_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80008b4:	f000 f832 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000090 	.word	0x20000090
 80008c4:	40012100 	.word	0x40012100
 80008c8:	0f000001 	.word	0x0f000001

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_GPIO_Init+0x4c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <MX_GPIO_Init+0x4c>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_GPIO_Init+0x4c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_GPIO_Init+0x4c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <MX_GPIO_Init+0x4c>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_GPIO_Init+0x4c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a36      	ldr	r2, [pc, #216]	; (8000a70 <HAL_ADC_MspInit+0xf8>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d130      	bne.n	80009fc <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	4b35      	ldr	r3, [pc, #212]	; (8000a74 <HAL_ADC_MspInit+0xfc>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a34      	ldr	r2, [pc, #208]	; (8000a74 <HAL_ADC_MspInit+0xfc>)
 80009a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <HAL_ADC_MspInit+0xfc>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	4b2e      	ldr	r3, [pc, #184]	; (8000a74 <HAL_ADC_MspInit+0xfc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a2d      	ldr	r2, [pc, #180]	; (8000a74 <HAL_ADC_MspInit+0xfc>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <HAL_ADC_MspInit+0xfc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4824      	ldr	r0, [pc, #144]	; (8000a78 <HAL_ADC_MspInit+0x100>)
 80009e6:	f000 febf 	bl	8001768 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2012      	movs	r0, #18
 80009f0:	f000 fe83 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009f4:	2012      	movs	r0, #18
 80009f6:	f000 fe9c 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80009fa:	e034      	b.n	8000a66 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <HAL_ADC_MspInit+0x104>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12f      	bne.n	8000a66 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <HAL_ADC_MspInit+0xfc>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_ADC_MspInit+0xfc>)
 8000a10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_ADC_MspInit+0xfc>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <HAL_ADC_MspInit+0xfc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <HAL_ADC_MspInit+0xfc>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_ADC_MspInit+0xfc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <HAL_ADC_MspInit+0x100>)
 8000a52:	f000 fe89 	bl	8001768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2012      	movs	r0, #18
 8000a5c:	f000 fe4d 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a60:	2012      	movs	r0, #18
 8000a62:	f000 fe66 	bl	8001732 <HAL_NVIC_EnableIRQ>
}
 8000a66:	bf00      	nop
 8000a68:	3730      	adds	r7, #48	; 0x30
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40012000 	.word	0x40012000
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40012100 	.word	0x40012100

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000acc:	f000 f89e 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <ADC_IRQHandler+0x14>)
 8000ada:	f000 f9d9 	bl	8000e90 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000ade:	4803      	ldr	r0, [pc, #12]	; (8000aec <ADC_IRQHandler+0x18>)
 8000ae0:	f000 f9d6 	bl	8000e90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000048 	.word	0x20000048
 8000aec:	20000090 	.word	0x20000090

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b1a:	490e      	ldr	r1, [pc, #56]	; (8000b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b30:	4c0b      	ldr	r4, [pc, #44]	; (8000b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b3e:	f7ff ffd7 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f001 fc11 	bl	8002368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fd7f 	bl	8000648 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b58:	080023f8 	.word	0x080023f8
  ldr r2, =_sbss
 8000b5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b60:	200000dc 	.word	0x200000dc

08000b64 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <CAN1_RX0_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 fda7 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fec4 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fdbf 	bl	800174e <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 fd87 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200000d8 	.word	0x200000d8

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	200000d8 	.word	0x200000d8

08000c4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e033      	b.n	8000cca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d109      	bne.n	8000c7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fe84 	bl	8000978 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d118      	bne.n	8000cbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c92:	f023 0302 	bic.w	r3, r3, #2
 8000c96:	f043 0202 	orr.w	r2, r3, #2
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 fb4a 	bl	8001338 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f023 0303 	bic.w	r3, r3, #3
 8000cb2:	f043 0201 	orr.w	r2, r3, #1
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000cba:	e001      	b.n	8000cc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d101      	bne.n	8000cee <HAL_ADC_Start_IT+0x1a>
 8000cea:	2302      	movs	r3, #2
 8000cec:	e0bd      	b.n	8000e6a <HAL_ADC_Start_IT+0x196>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d018      	beq.n	8000d36 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f042 0201 	orr.w	r2, r2, #1
 8000d12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d14:	4b58      	ldr	r3, [pc, #352]	; (8000e78 <HAL_ADC_Start_IT+0x1a4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a58      	ldr	r2, [pc, #352]	; (8000e7c <HAL_ADC_Start_IT+0x1a8>)
 8000d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1e:	0c9a      	lsrs	r2, r3, #18
 8000d20:	4613      	mov	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d28:	e002      	b.n	8000d30 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f9      	bne.n	8000d2a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	f040 8085 	bne.w	8000e50 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d4e:	f023 0301 	bic.w	r3, r3, #1
 8000d52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d007      	beq.n	8000d78 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d84:	d106      	bne.n	8000d94 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f023 0206 	bic.w	r2, r3, #6
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	645a      	str	r2, [r3, #68]	; 0x44
 8000d92:	e002      	b.n	8000d9a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <HAL_ADC_Start_IT+0x1ac>)
 8000da4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000dae:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	6812      	ldr	r2, [r2, #0]
 8000dba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dbe:	f043 0320 	orr.w	r3, r3, #32
 8000dc2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 031f 	and.w	r3, r3, #31
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d12a      	bne.n	8000e26 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a2b      	ldr	r2, [pc, #172]	; (8000e84 <HAL_ADC_Start_IT+0x1b0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d015      	beq.n	8000e06 <HAL_ADC_Start_IT+0x132>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a2a      	ldr	r2, [pc, #168]	; (8000e88 <HAL_ADC_Start_IT+0x1b4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d105      	bne.n	8000df0 <HAL_ADC_Start_IT+0x11c>
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <HAL_ADC_Start_IT+0x1ac>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 031f 	and.w	r3, r3, #31
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d00a      	beq.n	8000e06 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <HAL_ADC_Start_IT+0x1b8>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d136      	bne.n	8000e68 <HAL_ADC_Start_IT+0x194>
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_ADC_Start_IT+0x1ac>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d130      	bne.n	8000e68 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d129      	bne.n	8000e68 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	e020      	b.n	8000e68 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <HAL_ADC_Start_IT+0x1b0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d11b      	bne.n	8000e68 <HAL_ADC_Start_IT+0x194>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d114      	bne.n	8000e68 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	e00b      	b.n	8000e68 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	f043 0210 	orr.w	r2, r3, #16
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e60:	f043 0201 	orr.w	r2, r3, #1
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	431bde83 	.word	0x431bde83
 8000e80:	40012300 	.word	0x40012300
 8000e84:	40012000 	.word	0x40012000
 8000e88:	40012100 	.word	0x40012100
 8000e8c:	40012200 	.word	0x40012200

08000e90 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d049      	beq.n	8000f5a <HAL_ADC_IRQHandler+0xca>
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d046      	beq.n	8000f5a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d12b      	bne.n	8000f4a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d127      	bne.n	8000f4a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d119      	bne.n	8000f4a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0220 	bic.w	r2, r2, #32
 8000f24:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d105      	bne.n	8000f4a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f043 0201 	orr.w	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fabe 	bl	80004cc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f06f 0212 	mvn.w	r2, #18
 8000f58:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f68:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d057      	beq.n	8001020 <HAL_ADC_IRQHandler+0x190>
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d054      	beq.n	8001020 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d139      	bne.n	8001010 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d12b      	bne.n	8001010 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d124      	bne.n	8001010 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11d      	bne.n	8001010 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d119      	bne.n	8001010 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001000:	2b00      	cmp	r3, #0
 8001002:	d105      	bne.n	8001010 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 fa8d 	bl	8001530 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f06f 020c 	mvn.w	r2, #12
 800101e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d017      	beq.n	8001066 <HAL_ADC_IRQHandler+0x1d6>
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d014      	beq.n	8001066 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d10d      	bne.n	8001066 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 f837 	bl	80010ca <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f06f 0201 	mvn.w	r2, #1
 8001064:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001074:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d015      	beq.n	80010a8 <HAL_ADC_IRQHandler+0x218>
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d012      	beq.n	80010a8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f043 0202 	orr.w	r2, r3, #2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f06f 0220 	mvn.w	r2, #32
 8001096:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f820 	bl	80010de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f06f 0220 	mvn.w	r2, #32
 80010a6:	601a      	str	r2, [r3, #0]
  }
}
 80010a8:	bf00      	nop
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001108:	2b01      	cmp	r3, #1
 800110a:	d101      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x1c>
 800110c:	2302      	movs	r3, #2
 800110e:	e105      	b.n	800131c <HAL_ADC_ConfigChannel+0x228>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b09      	cmp	r3, #9
 800111e:	d925      	bls.n	800116c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68d9      	ldr	r1, [r3, #12]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	3b1e      	subs	r3, #30
 8001136:	2207      	movs	r2, #7
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43da      	mvns	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	400a      	ands	r2, r1
 8001144:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68d9      	ldr	r1, [r3, #12]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	b29b      	uxth	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	4603      	mov	r3, r0
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4403      	add	r3, r0
 800115e:	3b1e      	subs	r3, #30
 8001160:	409a      	lsls	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	e022      	b.n	80011b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6919      	ldr	r1, [r3, #16]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	2207      	movs	r2, #7
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6919      	ldr	r1, [r3, #16]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4403      	add	r3, r0
 80011a8:	409a      	lsls	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d824      	bhi.n	8001204 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	3b05      	subs	r3, #5
 80011cc:	221f      	movs	r2, #31
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	400a      	ands	r2, r1
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	3b05      	subs	r3, #5
 80011f6:	fa00 f203 	lsl.w	r2, r0, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	635a      	str	r2, [r3, #52]	; 0x34
 8001202:	e04c      	b.n	800129e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b0c      	cmp	r3, #12
 800120a:	d824      	bhi.n	8001256 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3b23      	subs	r3, #35	; 0x23
 800121e:	221f      	movs	r2, #31
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43da      	mvns	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	400a      	ands	r2, r1
 800122c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	b29b      	uxth	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	3b23      	subs	r3, #35	; 0x23
 8001248:	fa00 f203 	lsl.w	r2, r0, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	631a      	str	r2, [r3, #48]	; 0x30
 8001254:	e023      	b.n	800129e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	3b41      	subs	r3, #65	; 0x41
 8001268:	221f      	movs	r2, #31
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	400a      	ands	r2, r1
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	3b41      	subs	r3, #65	; 0x41
 8001292:	fa00 f203 	lsl.w	r2, r0, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <HAL_ADC_ConfigChannel+0x234>)
 80012a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a21      	ldr	r2, [pc, #132]	; (800132c <HAL_ADC_ConfigChannel+0x238>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d109      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x1cc>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b12      	cmp	r3, #18
 80012b2:	d105      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_ADC_ConfigChannel+0x238>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d123      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x21e>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b10      	cmp	r3, #16
 80012d0:	d003      	beq.n	80012da <HAL_ADC_ConfigChannel+0x1e6>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b11      	cmp	r3, #17
 80012d8:	d11b      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b10      	cmp	r3, #16
 80012ec:	d111      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_ADC_ConfigChannel+0x23c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <HAL_ADC_ConfigChannel+0x240>)
 80012f4:	fba2 2303 	umull	r2, r3, r2, r3
 80012f8:	0c9a      	lsrs	r2, r3, #18
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001304:	e002      	b.n	800130c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	3b01      	subs	r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f9      	bne.n	8001306 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40012300 	.word	0x40012300
 800132c:	40012000 	.word	0x40012000
 8001330:	20000000 	.word	0x20000000
 8001334:	431bde83 	.word	0x431bde83

08001338 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001340:	4b79      	ldr	r3, [pc, #484]	; (8001528 <ADC_Init+0x1f0>)
 8001342:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	431a      	orrs	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800136c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	021a      	lsls	r2, r3, #8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6859      	ldr	r1, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6899      	ldr	r1, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	4a58      	ldr	r2, [pc, #352]	; (800152c <ADC_Init+0x1f4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d022      	beq.n	8001416 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6899      	ldr	r1, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6899      	ldr	r1, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	e00f      	b.n	8001436 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001434:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0202 	bic.w	r2, r2, #2
 8001444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6899      	ldr	r1, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7e1b      	ldrb	r3, [r3, #24]
 8001450:	005a      	lsls	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01b      	beq.n	800149c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001472:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001482:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6859      	ldr	r1, [r3, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	3b01      	subs	r3, #1
 8001490:	035a      	lsls	r2, r3, #13
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	e007      	b.n	80014ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	051a      	lsls	r2, r3, #20
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6899      	ldr	r1, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ee:	025a      	lsls	r2, r3, #9
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6899      	ldr	r1, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	029a      	lsls	r2, r3, #10
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	609a      	str	r2, [r3, #8]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40012300 	.word	0x40012300
 800152c:	0f000001 	.word	0x0f000001

08001530 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0b      	blt.n	80015d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <__NVIC_EnableIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff29 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff3e 	bl	800158c <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff8e 	bl	8001638 <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5d 	bl	80015e4 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff31 	bl	80015a8 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	e16b      	b.n	8001a5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 815a 	bne.w	8001a56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d005      	beq.n	80017ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d130      	bne.n	800181c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	f003 0201 	and.w	r2, r3, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b03      	cmp	r3, #3
 8001826:	d017      	beq.n	8001858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d123      	bne.n	80018ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	08da      	lsrs	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3208      	adds	r2, #8
 800186c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3208      	adds	r2, #8
 80018a6:	69b9      	ldr	r1, [r7, #24]
 80018a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0203 	and.w	r2, r3, #3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80b4 	beq.w	8001a56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b60      	ldr	r3, [pc, #384]	; (8001a74 <HAL_GPIO_Init+0x30c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a5f      	ldr	r2, [pc, #380]	; (8001a74 <HAL_GPIO_Init+0x30c>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <HAL_GPIO_Init+0x30c>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800190a:	4a5b      	ldr	r2, [pc, #364]	; (8001a78 <HAL_GPIO_Init+0x310>)
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	3302      	adds	r3, #2
 8001912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	220f      	movs	r2, #15
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a52      	ldr	r2, [pc, #328]	; (8001a7c <HAL_GPIO_Init+0x314>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d02b      	beq.n	800198e <HAL_GPIO_Init+0x226>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a51      	ldr	r2, [pc, #324]	; (8001a80 <HAL_GPIO_Init+0x318>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d025      	beq.n	800198a <HAL_GPIO_Init+0x222>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a50      	ldr	r2, [pc, #320]	; (8001a84 <HAL_GPIO_Init+0x31c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01f      	beq.n	8001986 <HAL_GPIO_Init+0x21e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4f      	ldr	r2, [pc, #316]	; (8001a88 <HAL_GPIO_Init+0x320>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d019      	beq.n	8001982 <HAL_GPIO_Init+0x21a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4e      	ldr	r2, [pc, #312]	; (8001a8c <HAL_GPIO_Init+0x324>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_GPIO_Init+0x216>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4d      	ldr	r2, [pc, #308]	; (8001a90 <HAL_GPIO_Init+0x328>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d00d      	beq.n	800197a <HAL_GPIO_Init+0x212>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4c      	ldr	r2, [pc, #304]	; (8001a94 <HAL_GPIO_Init+0x32c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d007      	beq.n	8001976 <HAL_GPIO_Init+0x20e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4b      	ldr	r2, [pc, #300]	; (8001a98 <HAL_GPIO_Init+0x330>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_GPIO_Init+0x20a>
 800196e:	2307      	movs	r3, #7
 8001970:	e00e      	b.n	8001990 <HAL_GPIO_Init+0x228>
 8001972:	2308      	movs	r3, #8
 8001974:	e00c      	b.n	8001990 <HAL_GPIO_Init+0x228>
 8001976:	2306      	movs	r3, #6
 8001978:	e00a      	b.n	8001990 <HAL_GPIO_Init+0x228>
 800197a:	2305      	movs	r3, #5
 800197c:	e008      	b.n	8001990 <HAL_GPIO_Init+0x228>
 800197e:	2304      	movs	r3, #4
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x228>
 8001982:	2303      	movs	r3, #3
 8001984:	e004      	b.n	8001990 <HAL_GPIO_Init+0x228>
 8001986:	2302      	movs	r3, #2
 8001988:	e002      	b.n	8001990 <HAL_GPIO_Init+0x228>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <HAL_GPIO_Init+0x228>
 800198e:	2300      	movs	r3, #0
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	f002 0203 	and.w	r2, r2, #3
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	4093      	lsls	r3, r2
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a0:	4935      	ldr	r1, [pc, #212]	; (8001a78 <HAL_GPIO_Init+0x310>)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_GPIO_Init+0x334>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019d2:	4a32      	ldr	r2, [pc, #200]	; (8001a9c <HAL_GPIO_Init+0x334>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d8:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <HAL_GPIO_Init+0x334>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <HAL_GPIO_Init+0x334>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_GPIO_Init+0x334>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a26:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_GPIO_Init+0x334>)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_GPIO_Init+0x334>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <HAL_GPIO_Init+0x334>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	61fb      	str	r3, [r7, #28]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	2b0f      	cmp	r3, #15
 8001a60:	f67f ae90 	bls.w	8001784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	3724      	adds	r7, #36	; 0x24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40013800 	.word	0x40013800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40020400 	.word	0x40020400
 8001a84:	40020800 	.word	0x40020800
 8001a88:	40020c00 	.word	0x40020c00
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40021400 	.word	0x40021400
 8001a94:	40021800 	.word	0x40021800
 8001a98:	40021c00 	.word	0x40021c00
 8001a9c:	40013c00 	.word	0x40013c00

08001aa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e267      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d075      	beq.n	8001baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001abe:	4b88      	ldr	r3, [pc, #544]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d00c      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aca:	4b85      	ldr	r3, [pc, #532]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d112      	bne.n	8001afc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad6:	4b82      	ldr	r3, [pc, #520]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ae2:	d10b      	bne.n	8001afc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	4b7e      	ldr	r3, [pc, #504]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d05b      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x108>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d157      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e242      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b04:	d106      	bne.n	8001b14 <HAL_RCC_OscConfig+0x74>
 8001b06:	4b76      	ldr	r3, [pc, #472]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a75      	ldr	r2, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e01d      	b.n	8001b50 <HAL_RCC_OscConfig+0xb0>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x98>
 8001b1e:	4b70      	ldr	r3, [pc, #448]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a6f      	ldr	r2, [pc, #444]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b6d      	ldr	r3, [pc, #436]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6c      	ldr	r2, [pc, #432]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0xb0>
 8001b38:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a68      	ldr	r2, [pc, #416]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a65      	ldr	r2, [pc, #404]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d013      	beq.n	8001b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff f86c 	bl	8000c34 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff f868 	bl	8000c34 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e207      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	4b5b      	ldr	r3, [pc, #364]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0xc0>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff f858 	bl	8000c34 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff f854 	bl	8000c34 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1f3      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	4b51      	ldr	r3, [pc, #324]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0xe8>
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d063      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d11c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bce:	4b44      	ldr	r3, [pc, #272]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d116      	bne.n	8001c08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x152>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e1c7      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4937      	ldr	r1, [pc, #220]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	e03a      	b.n	8001c7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c10:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <HAL_RCC_OscConfig+0x244>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff f80d 	bl	8000c34 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff f809 	bl	8000c34 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1a8      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4925      	ldr	r1, [pc, #148]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_RCC_OscConfig+0x244>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7fe ffec 	bl	8000c34 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c60:	f7fe ffe8 	bl	8000c34 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e187      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d036      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d016      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_RCC_OscConfig+0x248>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7fe ffcc 	bl	8000c34 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7fe ffc8 	bl	8000c34 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e167      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x200>
 8001cbe:	e01b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_RCC_OscConfig+0x248>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7fe ffb5 	bl	8000c34 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	e00e      	b.n	8001cec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cce:	f7fe ffb1 	bl	8000c34 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d907      	bls.n	8001cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e150      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	42470000 	.word	0x42470000
 8001ce8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ea      	bne.n	8001cce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 8097 	beq.w	8001e34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0a:	4b81      	ldr	r3, [pc, #516]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10f      	bne.n	8001d36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b7d      	ldr	r3, [pc, #500]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a7c      	ldr	r2, [pc, #496]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b7a      	ldr	r3, [pc, #488]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b77      	ldr	r3, [pc, #476]	; (8001f14 <HAL_RCC_OscConfig+0x474>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d118      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d42:	4b74      	ldr	r3, [pc, #464]	; (8001f14 <HAL_RCC_OscConfig+0x474>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a73      	ldr	r2, [pc, #460]	; (8001f14 <HAL_RCC_OscConfig+0x474>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4e:	f7fe ff71 	bl	8000c34 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7fe ff6d 	bl	8000c34 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e10c      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <HAL_RCC_OscConfig+0x474>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x2ea>
 8001d7c:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	4a63      	ldr	r2, [pc, #396]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6713      	str	r3, [r2, #112]	; 0x70
 8001d88:	e01c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x324>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x30c>
 8001d92:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	4a5e      	ldr	r2, [pc, #376]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9e:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	4a5b      	ldr	r2, [pc, #364]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6713      	str	r3, [r2, #112]	; 0x70
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x324>
 8001dac:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	4a57      	ldr	r2, [pc, #348]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	; 0x70
 8001db8:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbc:	4a54      	ldr	r2, [pc, #336]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d015      	beq.n	8001df8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7fe ff32 	bl	8000c34 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7fe ff2e 	bl	8000c34 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0cb      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dea:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0ee      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x334>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7fe ff1c 	bl	8000c34 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7fe ff18 	bl	8000c34 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0b5      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e16:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ee      	bne.n	8001e00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e28:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80a1 	beq.w	8001f80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e3e:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d05c      	beq.n	8001f04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d141      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <HAL_RCC_OscConfig+0x478>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7fe feec 	bl	8000c34 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e60:	f7fe fee8 	bl	8000c34 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e087      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e72:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	019b      	lsls	r3, r3, #6
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	085b      	lsrs	r3, r3, #1
 8001e96:	3b01      	subs	r3, #1
 8001e98:	041b      	lsls	r3, r3, #16
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	491b      	ldr	r1, [pc, #108]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_RCC_OscConfig+0x478>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7fe fec1 	bl	8000c34 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7fe febd 	bl	8000c34 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e05c      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x416>
 8001ed4:	e054      	b.n	8001f80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <HAL_RCC_OscConfig+0x478>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7fe feaa 	bl	8000c34 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7fe fea6 	bl	8000c34 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e045      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x444>
 8001f02:	e03d      	b.n	8001f80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e038      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000
 8001f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_RCC_OscConfig+0x4ec>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d028      	beq.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d121      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d11a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d111      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	3b01      	subs	r3, #1
 8001f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0cc      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d90c      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0b8      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe4:	4b59      	ldr	r3, [pc, #356]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffc:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	494d      	ldr	r1, [pc, #308]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d044      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d119      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d003      	beq.n	800204e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800204a:	2b03      	cmp	r3, #3
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e06f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e067      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206e:	4b37      	ldr	r3, [pc, #220]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4934      	ldr	r1, [pc, #208]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002080:	f7fe fdd8 	bl	8000c34 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7fe fdd4 	bl	8000c34 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e04f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 020c 	and.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1eb      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d20c      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e032      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4916      	ldr	r1, [pc, #88]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	490e      	ldr	r1, [pc, #56]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002116:	f000 f821 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800211a:	4602      	mov	r2, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	490a      	ldr	r1, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	5ccb      	ldrb	r3, [r1, r3]
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1c8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fd38 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023c00 	.word	0x40023c00
 800214c:	40023800 	.word	0x40023800
 8002150:	080023d8 	.word	0x080023d8
 8002154:	20000000 	.word	0x20000000
 8002158:	20000004 	.word	0x20000004

0800215c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002160:	b094      	sub	sp, #80	; 0x50
 8002162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	647b      	str	r3, [r7, #68]	; 0x44
 8002168:	2300      	movs	r3, #0
 800216a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800216c:	2300      	movs	r3, #0
 800216e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002174:	4b79      	ldr	r3, [pc, #484]	; (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d00d      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x40>
 8002180:	2b08      	cmp	r3, #8
 8002182:	f200 80e1 	bhi.w	8002348 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x34>
 800218a:	2b04      	cmp	r3, #4
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x3a>
 800218e:	e0db      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b73      	ldr	r3, [pc, #460]	; (8002360 <HAL_RCC_GetSysClockFreq+0x204>)
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002194:	e0db      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002196:	4b73      	ldr	r3, [pc, #460]	; (8002364 <HAL_RCC_GetSysClockFreq+0x208>)
 8002198:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800219a:	e0d8      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800219c:	4b6f      	ldr	r3, [pc, #444]	; (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a6:	4b6d      	ldr	r3, [pc, #436]	; (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d063      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b2:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	099b      	lsrs	r3, r3, #6
 80021b8:	2200      	movs	r2, #0
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80021bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
 80021ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021ce:	4622      	mov	r2, r4
 80021d0:	462b      	mov	r3, r5
 80021d2:	f04f 0000 	mov.w	r0, #0
 80021d6:	f04f 0100 	mov.w	r1, #0
 80021da:	0159      	lsls	r1, r3, #5
 80021dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e0:	0150      	lsls	r0, r2, #5
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4621      	mov	r1, r4
 80021e8:	1a51      	subs	r1, r2, r1
 80021ea:	6139      	str	r1, [r7, #16]
 80021ec:	4629      	mov	r1, r5
 80021ee:	eb63 0301 	sbc.w	r3, r3, r1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002200:	4659      	mov	r1, fp
 8002202:	018b      	lsls	r3, r1, #6
 8002204:	4651      	mov	r1, sl
 8002206:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800220a:	4651      	mov	r1, sl
 800220c:	018a      	lsls	r2, r1, #6
 800220e:	4651      	mov	r1, sl
 8002210:	ebb2 0801 	subs.w	r8, r2, r1
 8002214:	4659      	mov	r1, fp
 8002216:	eb63 0901 	sbc.w	r9, r3, r1
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800222a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800222e:	4690      	mov	r8, r2
 8002230:	4699      	mov	r9, r3
 8002232:	4623      	mov	r3, r4
 8002234:	eb18 0303 	adds.w	r3, r8, r3
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	462b      	mov	r3, r5
 800223c:	eb49 0303 	adc.w	r3, r9, r3
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800224e:	4629      	mov	r1, r5
 8002250:	024b      	lsls	r3, r1, #9
 8002252:	4621      	mov	r1, r4
 8002254:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002258:	4621      	mov	r1, r4
 800225a:	024a      	lsls	r2, r1, #9
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002262:	2200      	movs	r2, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
 8002266:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002268:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800226c:	f7fd ffac 	bl	80001c8 <__aeabi_uldivmod>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4613      	mov	r3, r2
 8002276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002278:	e058      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227a:	4b38      	ldr	r3, [pc, #224]	; (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	099b      	lsrs	r3, r3, #6
 8002280:	2200      	movs	r2, #0
 8002282:	4618      	mov	r0, r3
 8002284:	4611      	mov	r1, r2
 8002286:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800228a:	623b      	str	r3, [r7, #32]
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
 8002290:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002294:	4642      	mov	r2, r8
 8002296:	464b      	mov	r3, r9
 8002298:	f04f 0000 	mov.w	r0, #0
 800229c:	f04f 0100 	mov.w	r1, #0
 80022a0:	0159      	lsls	r1, r3, #5
 80022a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a6:	0150      	lsls	r0, r2, #5
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4641      	mov	r1, r8
 80022ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80022b2:	4649      	mov	r1, r9
 80022b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022cc:	ebb2 040a 	subs.w	r4, r2, sl
 80022d0:	eb63 050b 	sbc.w	r5, r3, fp
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	00eb      	lsls	r3, r5, #3
 80022de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e2:	00e2      	lsls	r2, r4, #3
 80022e4:	4614      	mov	r4, r2
 80022e6:	461d      	mov	r5, r3
 80022e8:	4643      	mov	r3, r8
 80022ea:	18e3      	adds	r3, r4, r3
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	464b      	mov	r3, r9
 80022f0:	eb45 0303 	adc.w	r3, r5, r3
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002302:	4629      	mov	r1, r5
 8002304:	028b      	lsls	r3, r1, #10
 8002306:	4621      	mov	r1, r4
 8002308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800230c:	4621      	mov	r1, r4
 800230e:	028a      	lsls	r2, r1, #10
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002316:	2200      	movs	r2, #0
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	61fa      	str	r2, [r7, #28]
 800231c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002320:	f7fd ff52 	bl	80001c8 <__aeabi_uldivmod>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4613      	mov	r3, r2
 800232a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	3301      	adds	r3, #1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800233c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002346:	e002      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCC_GetSysClockFreq+0x204>)
 800234a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800234c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800234e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002350:	4618      	mov	r0, r3
 8002352:	3750      	adds	r7, #80	; 0x50
 8002354:	46bd      	mov	sp, r7
 8002356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	00f42400 	.word	0x00f42400
 8002364:	007a1200 	.word	0x007a1200

08002368 <__libc_init_array>:
 8002368:	b570      	push	{r4, r5, r6, lr}
 800236a:	4d0d      	ldr	r5, [pc, #52]	; (80023a0 <__libc_init_array+0x38>)
 800236c:	4c0d      	ldr	r4, [pc, #52]	; (80023a4 <__libc_init_array+0x3c>)
 800236e:	1b64      	subs	r4, r4, r5
 8002370:	10a4      	asrs	r4, r4, #2
 8002372:	2600      	movs	r6, #0
 8002374:	42a6      	cmp	r6, r4
 8002376:	d109      	bne.n	800238c <__libc_init_array+0x24>
 8002378:	4d0b      	ldr	r5, [pc, #44]	; (80023a8 <__libc_init_array+0x40>)
 800237a:	4c0c      	ldr	r4, [pc, #48]	; (80023ac <__libc_init_array+0x44>)
 800237c:	f000 f820 	bl	80023c0 <_init>
 8002380:	1b64      	subs	r4, r4, r5
 8002382:	10a4      	asrs	r4, r4, #2
 8002384:	2600      	movs	r6, #0
 8002386:	42a6      	cmp	r6, r4
 8002388:	d105      	bne.n	8002396 <__libc_init_array+0x2e>
 800238a:	bd70      	pop	{r4, r5, r6, pc}
 800238c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002390:	4798      	blx	r3
 8002392:	3601      	adds	r6, #1
 8002394:	e7ee      	b.n	8002374 <__libc_init_array+0xc>
 8002396:	f855 3b04 	ldr.w	r3, [r5], #4
 800239a:	4798      	blx	r3
 800239c:	3601      	adds	r6, #1
 800239e:	e7f2      	b.n	8002386 <__libc_init_array+0x1e>
 80023a0:	080023f0 	.word	0x080023f0
 80023a4:	080023f0 	.word	0x080023f0
 80023a8:	080023f0 	.word	0x080023f0
 80023ac:	080023f4 	.word	0x080023f4

080023b0 <memset>:
 80023b0:	4402      	add	r2, r0
 80023b2:	4603      	mov	r3, r0
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d100      	bne.n	80023ba <memset+0xa>
 80023b8:	4770      	bx	lr
 80023ba:	f803 1b01 	strb.w	r1, [r3], #1
 80023be:	e7f9      	b.n	80023b4 <memset+0x4>

080023c0 <_init>:
 80023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c2:	bf00      	nop
 80023c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c6:	bc08      	pop	{r3}
 80023c8:	469e      	mov	lr, r3
 80023ca:	4770      	bx	lr

080023cc <_fini>:
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ce:	bf00      	nop
 80023d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d2:	bc08      	pop	{r3}
 80023d4:	469e      	mov	lr, r3
 80023d6:	4770      	bx	lr
