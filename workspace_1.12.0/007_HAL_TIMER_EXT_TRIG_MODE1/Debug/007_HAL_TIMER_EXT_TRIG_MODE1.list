
007_HAL_TIMER_EXT_TRIG_MODE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ba8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d30  08001d30  00011d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d40  08001d40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001d40  08001d40  00011d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d48  08001d48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d48  08001d48  00011d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d4c  08001d4c  00011d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008742  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013ca  00000000  00000000  0002877e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  00029b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000898  00000000  00000000  0002a488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa96  00000000  00000000  0002ad20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009baf  00000000  00000000  0004a7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4641  00000000  00000000  00054365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001189a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002684  00000000  00000000  001189f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001d18 	.word	0x08001d18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001d18 	.word	0x08001d18

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 f9b8 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f812 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8c0 	bl	800065c <MX_GPIO_Init>
  MX_TIM2_Init();
 80004dc:	f000 f86c 	bl	80005b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim2);
 80004e0:	4804      	ldr	r0, [pc, #16]	; (80004f4 <main+0x28>)
 80004e2:	f001 f917 	bl	8001714 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count= __HAL_TIM_GetCounter(&htim2);
 80004e6:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <main+0x28>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	4b02      	ldr	r3, [pc, #8]	; (80004f8 <main+0x2c>)
 80004f0:	801a      	strh	r2, [r3, #0]
 80004f2:	e7f8      	b.n	80004e6 <main+0x1a>
 80004f4:	20000028 	.word	0x20000028
 80004f8:	20000070 	.word	0x20000070

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fbfc 	bl	8001d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <SystemClock_Config+0xb4>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a21      	ldr	r2, [pc, #132]	; (80005b0 <SystemClock_Config+0xb4>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <SystemClock_Config+0xb4>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <SystemClock_Config+0xb8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <SystemClock_Config+0xb8>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <SystemClock_Config+0xb8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2310      	movs	r3, #16
 8000562:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000564:	2300      	movs	r3, #0
 8000566:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0320 	add.w	r3, r7, #32
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fc5d 	bl	8000e2c <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000578:	f000 f88a 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fec0 	bl	800131c <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005a2:	f000 f875 	bl	8000690 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3750      	adds	r7, #80	; 0x50
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40007000 	.word	0x40007000

080005b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <MX_TIM2_Init+0xa0>)
 80005d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_TIM2_Init+0xa0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_TIM2_Init+0xa0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_TIM2_Init+0xa0>)
 80005ec:	2264      	movs	r2, #100	; 0x64
 80005ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_TIM2_Init+0xa0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_TIM2_Init+0xa0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005fc:	4816      	ldr	r0, [pc, #88]	; (8000658 <MX_TIM2_Init+0xa0>)
 80005fe:	f001 f839 	bl	8001674 <HAL_TIM_Base_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000608:	f000 f842 	bl	8000690 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800060c:	2307      	movs	r3, #7
 800060e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000610:	2350      	movs	r3, #80	; 0x50
 8000612:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4619      	mov	r1, r3
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <MX_TIM2_Init+0xa0>)
 8000624:	f001 f8de 	bl	80017e4 <HAL_TIM_SlaveConfigSynchro>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800062e:	f000 f82f 	bl	8000690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <MX_TIM2_Init+0xa0>)
 8000640:	f001 fac2 	bl	8001bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800064a:	f000 f821 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000028 	.word	0x20000028

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_GPIO_Init+0x30>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <MX_GPIO_Init+0x30>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_GPIO_Init+0x30>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	e7fe      	b.n	8000698 <Error_Handler+0x8>
	...

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <HAL_MspInit+0x4c>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <HAL_MspInit+0x4c>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6453      	str	r3, [r2, #68]	; 0x44
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <HAL_MspInit+0x4c>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_MspInit+0x4c>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <HAL_MspInit+0x4c>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	6413      	str	r3, [r2, #64]	; 0x40
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_MspInit+0x4c>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800070c:	d12b      	bne.n	8000766 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_TIM_Base_MspInit+0x84>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	4a16      	ldr	r2, [pc, #88]	; (8000770 <HAL_TIM_Base_MspInit+0x84>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6413      	str	r3, [r2, #64]	; 0x40
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_TIM_Base_MspInit+0x84>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <HAL_TIM_Base_MspInit+0x84>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <HAL_TIM_Base_MspInit+0x84>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <HAL_TIM_Base_MspInit+0x84>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000746:	2301      	movs	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000756:	2301      	movs	r3, #1
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <HAL_TIM_Base_MspInit+0x88>)
 8000762:	f000 f9c7 	bl	8000af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40020000 	.word	0x40020000

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <MemManage_Handler+0x4>

0800078a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <UsageFault_Handler+0x4>

08000796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f890 	bl	80008e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <SystemInit+0x20>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <SystemInit+0x20>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007f6:	490e      	ldr	r1, [pc, #56]	; (8000830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007f8:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800080c:	4c0b      	ldr	r4, [pc, #44]	; (800083c <LoopFillZerobss+0x26>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800081a:	f7ff ffd7 	bl	80007cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800081e:	f001 fa4f 	bl	8001cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000822:	f7ff fe53 	bl	80004cc <main>
  bx  lr    
 8000826:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000828:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000834:	08001d50 	.word	0x08001d50
  ldr r2, =_sbss
 8000838:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800083c:	20000078 	.word	0x20000078

08000840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_Init+0x40>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <HAL_Init+0x40>)
 800084e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_Init+0x40>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <HAL_Init+0x40>)
 800085a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800085e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_Init+0x40>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a07      	ldr	r2, [pc, #28]	; (8000884 <HAL_Init+0x40>)
 8000866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086c:	2003      	movs	r0, #3
 800086e:	f000 f90d 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000872:	200f      	movs	r0, #15
 8000874:	f000 f808 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000878:	f7ff ff10 	bl	800069c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023c00 	.word	0x40023c00

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x54>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x58>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f917 	bl	8000ada <HAL_SYSTICK_Config>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00e      	b.n	80008d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d80a      	bhi.n	80008d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008bc:	2200      	movs	r2, #0
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f000 f8ed 	bl	8000aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c8:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <HAL_InitTick+0x5c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e000      	b.n	80008d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000004 	.word	0x20000004

080008e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x20>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x24>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_IncTick+0x24>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000008 	.word	0x20000008
 800090c:	20000074 	.word	0x20000074

08000910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <HAL_GetTick+0x14>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000074 	.word	0x20000074

08000928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <__NVIC_GetPriorityGrouping+0x18>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	f003 0307 	and.w	r3, r3, #7
}
 800097e:	4618      	mov	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	bf28      	it	cs
 80009fe:	2304      	movcs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3304      	adds	r3, #4
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d902      	bls.n	8000a10 <NVIC_EncodePriority+0x30>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3b03      	subs	r3, #3
 8000a0e:	e000      	b.n	8000a12 <NVIC_EncodePriority+0x32>
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43d9      	mvns	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a58:	d301      	bcc.n	8000a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00f      	b.n	8000a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SysTick_Config+0x40>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a66:	210f      	movs	r1, #15
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f7ff ff8e 	bl	800098c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x40>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff47 	bl	8000928 <__NVIC_SetPriorityGrouping>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff5c 	bl	8000970 <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff8e 	bl	80009e0 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5d 	bl	800098c <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffb0 	bl	8000a48 <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e16b      	b.n	8000de8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b10:	2201      	movs	r2, #1
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	f040 815a 	bne.w	8000de2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d005      	beq.n	8000b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d130      	bne.n	8000ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	68da      	ldr	r2, [r3, #12]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	091b      	lsrs	r3, r3, #4
 8000b92:	f003 0201 	and.w	r2, r3, #1
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d017      	beq.n	8000be4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d123      	bne.n	8000c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	08da      	lsrs	r2, r3, #3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	220f      	movs	r2, #15
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	691a      	ldr	r2, [r3, #16]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	08da      	lsrs	r2, r3, #3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3208      	adds	r2, #8
 8000c32:	69b9      	ldr	r1, [r7, #24]
 8000c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0203 	and.w	r2, r3, #3
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f000 80b4 	beq.w	8000de2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b60      	ldr	r3, [pc, #384]	; (8000e00 <HAL_GPIO_Init+0x30c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a5f      	ldr	r2, [pc, #380]	; (8000e00 <HAL_GPIO_Init+0x30c>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b5d      	ldr	r3, [pc, #372]	; (8000e00 <HAL_GPIO_Init+0x30c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c96:	4a5b      	ldr	r2, [pc, #364]	; (8000e04 <HAL_GPIO_Init+0x310>)
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	220f      	movs	r2, #15
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a52      	ldr	r2, [pc, #328]	; (8000e08 <HAL_GPIO_Init+0x314>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d02b      	beq.n	8000d1a <HAL_GPIO_Init+0x226>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a51      	ldr	r2, [pc, #324]	; (8000e0c <HAL_GPIO_Init+0x318>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d025      	beq.n	8000d16 <HAL_GPIO_Init+0x222>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a50      	ldr	r2, [pc, #320]	; (8000e10 <HAL_GPIO_Init+0x31c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d01f      	beq.n	8000d12 <HAL_GPIO_Init+0x21e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a4f      	ldr	r2, [pc, #316]	; (8000e14 <HAL_GPIO_Init+0x320>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d019      	beq.n	8000d0e <HAL_GPIO_Init+0x21a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a4e      	ldr	r2, [pc, #312]	; (8000e18 <HAL_GPIO_Init+0x324>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d013      	beq.n	8000d0a <HAL_GPIO_Init+0x216>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a4d      	ldr	r2, [pc, #308]	; (8000e1c <HAL_GPIO_Init+0x328>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d00d      	beq.n	8000d06 <HAL_GPIO_Init+0x212>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4c      	ldr	r2, [pc, #304]	; (8000e20 <HAL_GPIO_Init+0x32c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d007      	beq.n	8000d02 <HAL_GPIO_Init+0x20e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4b      	ldr	r2, [pc, #300]	; (8000e24 <HAL_GPIO_Init+0x330>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d101      	bne.n	8000cfe <HAL_GPIO_Init+0x20a>
 8000cfa:	2307      	movs	r3, #7
 8000cfc:	e00e      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000cfe:	2308      	movs	r3, #8
 8000d00:	e00c      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d02:	2306      	movs	r3, #6
 8000d04:	e00a      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d06:	2305      	movs	r3, #5
 8000d08:	e008      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e004      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e002      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <HAL_GPIO_Init+0x228>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	f002 0203 	and.w	r2, r2, #3
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	4093      	lsls	r3, r2
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d2c:	4935      	ldr	r1, [pc, #212]	; (8000e04 <HAL_GPIO_Init+0x310>)
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	3302      	adds	r3, #2
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d3a:	4b3b      	ldr	r3, [pc, #236]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d5e:	4a32      	ldr	r2, [pc, #200]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d64:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000db2:	4a1d      	ldr	r2, [pc, #116]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <HAL_GPIO_Init+0x334>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3301      	adds	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	2b0f      	cmp	r3, #15
 8000dec:	f67f ae90 	bls.w	8000b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40013800 	.word	0x40013800
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020c00 	.word	0x40020c00
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40021400 	.word	0x40021400
 8000e20:	40021800 	.word	0x40021800
 8000e24:	40021c00 	.word	0x40021c00
 8000e28:	40013c00 	.word	0x40013c00

08000e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e267      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d075      	beq.n	8000f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e4a:	4b88      	ldr	r3, [pc, #544]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 030c 	and.w	r3, r3, #12
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	d00c      	beq.n	8000e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e56:	4b85      	ldr	r3, [pc, #532]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d112      	bne.n	8000e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e62:	4b82      	ldr	r3, [pc, #520]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e6e:	d10b      	bne.n	8000e88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e70:	4b7e      	ldr	r3, [pc, #504]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d05b      	beq.n	8000f34 <HAL_RCC_OscConfig+0x108>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d157      	bne.n	8000f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e242      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e90:	d106      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x74>
 8000e92:	4b76      	ldr	r3, [pc, #472]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a75      	ldr	r2, [pc, #468]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e01d      	b.n	8000edc <HAL_RCC_OscConfig+0xb0>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x98>
 8000eaa:	4b70      	ldr	r3, [pc, #448]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a6f      	ldr	r2, [pc, #444]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4b6d      	ldr	r3, [pc, #436]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a6c      	ldr	r2, [pc, #432]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e00b      	b.n	8000edc <HAL_RCC_OscConfig+0xb0>
 8000ec4:	4b69      	ldr	r3, [pc, #420]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a68      	ldr	r2, [pc, #416]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b66      	ldr	r3, [pc, #408]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a65      	ldr	r2, [pc, #404]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d013      	beq.n	8000f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fd14 	bl	8000910 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eec:	f7ff fd10 	bl	8000910 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b64      	cmp	r3, #100	; 0x64
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e207      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efe:	4b5b      	ldr	r3, [pc, #364]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f0      	beq.n	8000eec <HAL_RCC_OscConfig+0xc0>
 8000f0a:	e014      	b.n	8000f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fd00 	bl	8000910 <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fcfc 	bl	8000910 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	; 0x64
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e1f3      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f26:	4b51      	ldr	r3, [pc, #324]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f0      	bne.n	8000f14 <HAL_RCC_OscConfig+0xe8>
 8000f32:	e000      	b.n	8000f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d063      	beq.n	800100a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f42:	4b4a      	ldr	r3, [pc, #296]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00b      	beq.n	8000f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f4e:	4b47      	ldr	r3, [pc, #284]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d11c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f5a:	4b44      	ldr	r3, [pc, #272]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d116      	bne.n	8000f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f66:	4b41      	ldr	r3, [pc, #260]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d005      	beq.n	8000f7e <HAL_RCC_OscConfig+0x152>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d001      	beq.n	8000f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e1c7      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7e:	4b3b      	ldr	r3, [pc, #236]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4937      	ldr	r1, [pc, #220]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f92:	e03a      	b.n	800100a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d020      	beq.n	8000fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f9c:	4b34      	ldr	r3, [pc, #208]	; (8001070 <HAL_RCC_OscConfig+0x244>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fcb5 	bl	8000910 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000faa:	f7ff fcb1 	bl	8000910 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e1a8      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f0      	beq.n	8000faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	4925      	ldr	r1, [pc, #148]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	600b      	str	r3, [r1, #0]
 8000fdc:	e015      	b.n	800100a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_RCC_OscConfig+0x244>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fc94 	bl	8000910 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fec:	f7ff fc90 	bl	8000910 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e187      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	2b00      	cmp	r3, #0
 8001014:	d036      	beq.n	8001084 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d016      	beq.n	800104c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_RCC_OscConfig+0x248>)
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001024:	f7ff fc74 	bl	8000910 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800102c:	f7ff fc70 	bl	8000910 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e167      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_RCC_OscConfig+0x240>)
 8001040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f0      	beq.n	800102c <HAL_RCC_OscConfig+0x200>
 800104a:	e01b      	b.n	8001084 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_RCC_OscConfig+0x248>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001052:	f7ff fc5d 	bl	8000910 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001058:	e00e      	b.n	8001078 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800105a:	f7ff fc59 	bl	8000910 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d907      	bls.n	8001078 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e150      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
 800106c:	40023800 	.word	0x40023800
 8001070:	42470000 	.word	0x42470000
 8001074:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001078:	4b88      	ldr	r3, [pc, #544]	; (800129c <HAL_RCC_OscConfig+0x470>)
 800107a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1ea      	bne.n	800105a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 8097 	beq.w	80011c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001096:	4b81      	ldr	r3, [pc, #516]	; (800129c <HAL_RCC_OscConfig+0x470>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10f      	bne.n	80010c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	4b7d      	ldr	r3, [pc, #500]	; (800129c <HAL_RCC_OscConfig+0x470>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a7c      	ldr	r2, [pc, #496]	; (800129c <HAL_RCC_OscConfig+0x470>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b7a      	ldr	r3, [pc, #488]	; (800129c <HAL_RCC_OscConfig+0x470>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010be:	2301      	movs	r3, #1
 80010c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c2:	4b77      	ldr	r3, [pc, #476]	; (80012a0 <HAL_RCC_OscConfig+0x474>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d118      	bne.n	8001100 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ce:	4b74      	ldr	r3, [pc, #464]	; (80012a0 <HAL_RCC_OscConfig+0x474>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a73      	ldr	r2, [pc, #460]	; (80012a0 <HAL_RCC_OscConfig+0x474>)
 80010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010da:	f7ff fc19 	bl	8000910 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e2:	f7ff fc15 	bl	8000910 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e10c      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f4:	4b6a      	ldr	r3, [pc, #424]	; (80012a0 <HAL_RCC_OscConfig+0x474>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0f0      	beq.n	80010e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d106      	bne.n	8001116 <HAL_RCC_OscConfig+0x2ea>
 8001108:	4b64      	ldr	r3, [pc, #400]	; (800129c <HAL_RCC_OscConfig+0x470>)
 800110a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800110c:	4a63      	ldr	r2, [pc, #396]	; (800129c <HAL_RCC_OscConfig+0x470>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6713      	str	r3, [r2, #112]	; 0x70
 8001114:	e01c      	b.n	8001150 <HAL_RCC_OscConfig+0x324>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2b05      	cmp	r3, #5
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x30c>
 800111e:	4b5f      	ldr	r3, [pc, #380]	; (800129c <HAL_RCC_OscConfig+0x470>)
 8001120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001122:	4a5e      	ldr	r2, [pc, #376]	; (800129c <HAL_RCC_OscConfig+0x470>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6713      	str	r3, [r2, #112]	; 0x70
 800112a:	4b5c      	ldr	r3, [pc, #368]	; (800129c <HAL_RCC_OscConfig+0x470>)
 800112c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800112e:	4a5b      	ldr	r2, [pc, #364]	; (800129c <HAL_RCC_OscConfig+0x470>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6713      	str	r3, [r2, #112]	; 0x70
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0x324>
 8001138:	4b58      	ldr	r3, [pc, #352]	; (800129c <HAL_RCC_OscConfig+0x470>)
 800113a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800113c:	4a57      	ldr	r2, [pc, #348]	; (800129c <HAL_RCC_OscConfig+0x470>)
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	6713      	str	r3, [r2, #112]	; 0x70
 8001144:	4b55      	ldr	r3, [pc, #340]	; (800129c <HAL_RCC_OscConfig+0x470>)
 8001146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001148:	4a54      	ldr	r2, [pc, #336]	; (800129c <HAL_RCC_OscConfig+0x470>)
 800114a:	f023 0304 	bic.w	r3, r3, #4
 800114e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d015      	beq.n	8001184 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001158:	f7ff fbda 	bl	8000910 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115e:	e00a      	b.n	8001176 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001160:	f7ff fbd6 	bl	8000910 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	f241 3288 	movw	r2, #5000	; 0x1388
 800116e:	4293      	cmp	r3, r2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e0cb      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001176:	4b49      	ldr	r3, [pc, #292]	; (800129c <HAL_RCC_OscConfig+0x470>)
 8001178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0ee      	beq.n	8001160 <HAL_RCC_OscConfig+0x334>
 8001182:	e014      	b.n	80011ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001184:	f7ff fbc4 	bl	8000910 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800118a:	e00a      	b.n	80011a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800118c:	f7ff fbc0 	bl	8000910 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f241 3288 	movw	r2, #5000	; 0x1388
 800119a:	4293      	cmp	r3, r2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e0b5      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a2:	4b3e      	ldr	r3, [pc, #248]	; (800129c <HAL_RCC_OscConfig+0x470>)
 80011a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ee      	bne.n	800118c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d105      	bne.n	80011c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b4:	4b39      	ldr	r3, [pc, #228]	; (800129c <HAL_RCC_OscConfig+0x470>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	4a38      	ldr	r2, [pc, #224]	; (800129c <HAL_RCC_OscConfig+0x470>)
 80011ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80a1 	beq.w	800130c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011ca:	4b34      	ldr	r3, [pc, #208]	; (800129c <HAL_RCC_OscConfig+0x470>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d05c      	beq.n	8001290 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d141      	bne.n	8001262 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <HAL_RCC_OscConfig+0x478>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fb94 	bl	8000910 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ec:	f7ff fb90 	bl	8000910 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e087      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011fe:	4b27      	ldr	r3, [pc, #156]	; (800129c <HAL_RCC_OscConfig+0x470>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69da      	ldr	r2, [r3, #28]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	019b      	lsls	r3, r3, #6
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	085b      	lsrs	r3, r3, #1
 8001222:	3b01      	subs	r3, #1
 8001224:	041b      	lsls	r3, r3, #16
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	061b      	lsls	r3, r3, #24
 800122e:	491b      	ldr	r1, [pc, #108]	; (800129c <HAL_RCC_OscConfig+0x470>)
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <HAL_RCC_OscConfig+0x478>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fb69 	bl	8000910 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001242:	f7ff fb65 	bl	8000910 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e05c      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_RCC_OscConfig+0x470>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x416>
 8001260:	e054      	b.n	800130c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_RCC_OscConfig+0x478>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fb52 	bl	8000910 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff fb4e 	bl	8000910 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e045      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_RCC_OscConfig+0x470>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x444>
 800128e:	e03d      	b.n	800130c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d107      	bne.n	80012a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e038      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
 800129c:	40023800 	.word	0x40023800
 80012a0:	40007000 	.word	0x40007000
 80012a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_RCC_OscConfig+0x4ec>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d028      	beq.n	8001308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d121      	bne.n	8001308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d11a      	bne.n	8001308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012d8:	4013      	ands	r3, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d111      	bne.n	8001308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	085b      	lsrs	r3, r3, #1
 80012f0:	3b01      	subs	r3, #1
 80012f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d107      	bne.n	8001308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001304:	429a      	cmp	r2, r3
 8001306:	d001      	beq.n	800130c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0cc      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001330:	4b68      	ldr	r3, [pc, #416]	; (80014d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d90c      	bls.n	8001358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	4b65      	ldr	r3, [pc, #404]	; (80014d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	4b63      	ldr	r3, [pc, #396]	; (80014d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e0b8      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001370:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800137a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001388:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	4a52      	ldr	r2, [pc, #328]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001394:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	494d      	ldr	r1, [pc, #308]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d044      	beq.n	800143c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d119      	bne.n	80013fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e07f      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d003      	beq.n	80013da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d107      	bne.n	80013ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013da:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d109      	bne.n	80013fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e06f      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e067      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f023 0203 	bic.w	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4934      	ldr	r1, [pc, #208]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001408:	4313      	orrs	r3, r2
 800140a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800140c:	f7ff fa80 	bl	8000910 <HAL_GetTick>
 8001410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001412:	e00a      	b.n	800142a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001414:	f7ff fa7c 	bl	8000910 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001422:	4293      	cmp	r3, r2
 8001424:	d901      	bls.n	800142a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e04f      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 020c 	and.w	r2, r3, #12
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	429a      	cmp	r2, r3
 800143a:	d1eb      	bne.n	8001414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <HAL_RCC_ClockConfig+0x1b8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d20c      	bcs.n	8001464 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HAL_RCC_ClockConfig+0x1b8>)
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e032      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4916      	ldr	r1, [pc, #88]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	4313      	orrs	r3, r2
 8001480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	490e      	ldr	r1, [pc, #56]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014a2:	f000 f821 	bl	80014e8 <HAL_RCC_GetSysClockFreq>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	490a      	ldr	r1, [pc, #40]	; (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	5ccb      	ldrb	r3, [r1, r3]
 80014b6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ba:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_RCC_ClockConfig+0x1c8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f9e0 	bl	8000888 <HAL_InitTick>

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023c00 	.word	0x40023c00
 80014d8:	40023800 	.word	0x40023800
 80014dc:	08001d30 	.word	0x08001d30
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014ec:	b090      	sub	sp, #64	; 0x40
 80014ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
 80014f4:	2300      	movs	r3, #0
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001500:	4b59      	ldr	r3, [pc, #356]	; (8001668 <HAL_RCC_GetSysClockFreq+0x180>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b08      	cmp	r3, #8
 800150a:	d00d      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x40>
 800150c:	2b08      	cmp	r3, #8
 800150e:	f200 80a1 	bhi.w	8001654 <HAL_RCC_GetSysClockFreq+0x16c>
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x34>
 8001516:	2b04      	cmp	r3, #4
 8001518:	d003      	beq.n	8001522 <HAL_RCC_GetSysClockFreq+0x3a>
 800151a:	e09b      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800151c:	4b53      	ldr	r3, [pc, #332]	; (800166c <HAL_RCC_GetSysClockFreq+0x184>)
 800151e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001520:	e09b      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001522:	4b53      	ldr	r3, [pc, #332]	; (8001670 <HAL_RCC_GetSysClockFreq+0x188>)
 8001524:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001526:	e098      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001528:	4b4f      	ldr	r3, [pc, #316]	; (8001668 <HAL_RCC_GetSysClockFreq+0x180>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <HAL_RCC_GetSysClockFreq+0x180>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d028      	beq.n	8001590 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <HAL_RCC_GetSysClockFreq+0x180>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	099b      	lsrs	r3, r3, #6
 8001544:	2200      	movs	r2, #0
 8001546:	623b      	str	r3, [r7, #32]
 8001548:	627a      	str	r2, [r7, #36]	; 0x24
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001550:	2100      	movs	r1, #0
 8001552:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_RCC_GetSysClockFreq+0x188>)
 8001554:	fb03 f201 	mul.w	r2, r3, r1
 8001558:	2300      	movs	r3, #0
 800155a:	fb00 f303 	mul.w	r3, r0, r3
 800155e:	4413      	add	r3, r2
 8001560:	4a43      	ldr	r2, [pc, #268]	; (8001670 <HAL_RCC_GetSysClockFreq+0x188>)
 8001562:	fba0 1202 	umull	r1, r2, r0, r2
 8001566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001568:	460a      	mov	r2, r1
 800156a:	62ba      	str	r2, [r7, #40]	; 0x28
 800156c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800156e:	4413      	add	r3, r2
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001574:	2200      	movs	r2, #0
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	61fa      	str	r2, [r7, #28]
 800157a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800157e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001582:	f7fe fe21 	bl	80001c8 <__aeabi_uldivmod>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4613      	mov	r3, r2
 800158c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800158e:	e053      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <HAL_RCC_GetSysClockFreq+0x180>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	099b      	lsrs	r3, r3, #6
 8001596:	2200      	movs	r2, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	617a      	str	r2, [r7, #20]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80015a2:	f04f 0b00 	mov.w	fp, #0
 80015a6:	4652      	mov	r2, sl
 80015a8:	465b      	mov	r3, fp
 80015aa:	f04f 0000 	mov.w	r0, #0
 80015ae:	f04f 0100 	mov.w	r1, #0
 80015b2:	0159      	lsls	r1, r3, #5
 80015b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015b8:	0150      	lsls	r0, r2, #5
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	ebb2 080a 	subs.w	r8, r2, sl
 80015c2:	eb63 090b 	sbc.w	r9, r3, fp
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80015d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80015d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80015da:	ebb2 0408 	subs.w	r4, r2, r8
 80015de:	eb63 0509 	sbc.w	r5, r3, r9
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	00eb      	lsls	r3, r5, #3
 80015ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015f0:	00e2      	lsls	r2, r4, #3
 80015f2:	4614      	mov	r4, r2
 80015f4:	461d      	mov	r5, r3
 80015f6:	eb14 030a 	adds.w	r3, r4, sl
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	eb45 030b 	adc.w	r3, r5, fp
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800160e:	4629      	mov	r1, r5
 8001610:	028b      	lsls	r3, r1, #10
 8001612:	4621      	mov	r1, r4
 8001614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001618:	4621      	mov	r1, r4
 800161a:	028a      	lsls	r2, r1, #10
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001622:	2200      	movs	r2, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	60fa      	str	r2, [r7, #12]
 8001628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800162c:	f7fe fdcc 	bl	80001c8 <__aeabi_uldivmod>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4613      	mov	r3, r2
 8001636:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_GetSysClockFreq+0x180>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	0c1b      	lsrs	r3, r3, #16
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	3301      	adds	r3, #1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001648:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800164a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001652:	e002      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RCC_GetSysClockFreq+0x184>)
 8001656:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800165a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800165c:	4618      	mov	r0, r3
 800165e:	3740      	adds	r7, #64	; 0x40
 8001660:	46bd      	mov	sp, r7
 8001662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	00f42400 	.word	0x00f42400
 8001670:	017d7840 	.word	0x017d7840

08001674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e041      	b.n	800170a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff f826 	bl	80006ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3304      	adds	r3, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4610      	mov	r0, r2
 80016b4:	f000 f8d8 	bl	8001868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d001      	beq.n	800172c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e046      	b.n	80017ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a23      	ldr	r2, [pc, #140]	; (80017c8 <HAL_TIM_Base_Start+0xb4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d022      	beq.n	8001784 <HAL_TIM_Base_Start+0x70>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001746:	d01d      	beq.n	8001784 <HAL_TIM_Base_Start+0x70>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <HAL_TIM_Base_Start+0xb8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d018      	beq.n	8001784 <HAL_TIM_Base_Start+0x70>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a1e      	ldr	r2, [pc, #120]	; (80017d0 <HAL_TIM_Base_Start+0xbc>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d013      	beq.n	8001784 <HAL_TIM_Base_Start+0x70>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <HAL_TIM_Base_Start+0xc0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00e      	beq.n	8001784 <HAL_TIM_Base_Start+0x70>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1b      	ldr	r2, [pc, #108]	; (80017d8 <HAL_TIM_Base_Start+0xc4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d009      	beq.n	8001784 <HAL_TIM_Base_Start+0x70>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a19      	ldr	r2, [pc, #100]	; (80017dc <HAL_TIM_Base_Start+0xc8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d004      	beq.n	8001784 <HAL_TIM_Base_Start+0x70>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <HAL_TIM_Base_Start+0xcc>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d111      	bne.n	80017a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b06      	cmp	r3, #6
 8001794:	d010      	beq.n	80017b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017a6:	e007      	b.n	80017b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40010000 	.word	0x40010000
 80017cc:	40000400 	.word	0x40000400
 80017d0:	40000800 	.word	0x40000800
 80017d4:	40000c00 	.word	0x40000c00
 80017d8:	40010400 	.word	0x40010400
 80017dc:	40014000 	.word	0x40014000
 80017e0:	40001800 	.word	0x40001800

080017e4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_TIM_SlaveConfigSynchro+0x18>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e031      	b.n	8001860 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2202      	movs	r2, #2
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800180c:	6839      	ldr	r1, [r7, #0]
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f8ca 	bl	80019a8 <TIM_SlaveTimer_SetConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e018      	b.n	8001860 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800183c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800184c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a40      	ldr	r2, [pc, #256]	; (800197c <TIM_Base_SetConfig+0x114>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d013      	beq.n	80018a8 <TIM_Base_SetConfig+0x40>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001886:	d00f      	beq.n	80018a8 <TIM_Base_SetConfig+0x40>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a3d      	ldr	r2, [pc, #244]	; (8001980 <TIM_Base_SetConfig+0x118>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d00b      	beq.n	80018a8 <TIM_Base_SetConfig+0x40>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a3c      	ldr	r2, [pc, #240]	; (8001984 <TIM_Base_SetConfig+0x11c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d007      	beq.n	80018a8 <TIM_Base_SetConfig+0x40>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3b      	ldr	r2, [pc, #236]	; (8001988 <TIM_Base_SetConfig+0x120>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d003      	beq.n	80018a8 <TIM_Base_SetConfig+0x40>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a3a      	ldr	r2, [pc, #232]	; (800198c <TIM_Base_SetConfig+0x124>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d108      	bne.n	80018ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a2f      	ldr	r2, [pc, #188]	; (800197c <TIM_Base_SetConfig+0x114>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d02b      	beq.n	800191a <TIM_Base_SetConfig+0xb2>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c8:	d027      	beq.n	800191a <TIM_Base_SetConfig+0xb2>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a2c      	ldr	r2, [pc, #176]	; (8001980 <TIM_Base_SetConfig+0x118>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d023      	beq.n	800191a <TIM_Base_SetConfig+0xb2>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a2b      	ldr	r2, [pc, #172]	; (8001984 <TIM_Base_SetConfig+0x11c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d01f      	beq.n	800191a <TIM_Base_SetConfig+0xb2>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a2a      	ldr	r2, [pc, #168]	; (8001988 <TIM_Base_SetConfig+0x120>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01b      	beq.n	800191a <TIM_Base_SetConfig+0xb2>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a29      	ldr	r2, [pc, #164]	; (800198c <TIM_Base_SetConfig+0x124>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d017      	beq.n	800191a <TIM_Base_SetConfig+0xb2>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a28      	ldr	r2, [pc, #160]	; (8001990 <TIM_Base_SetConfig+0x128>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <TIM_Base_SetConfig+0xb2>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a27      	ldr	r2, [pc, #156]	; (8001994 <TIM_Base_SetConfig+0x12c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00f      	beq.n	800191a <TIM_Base_SetConfig+0xb2>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a26      	ldr	r2, [pc, #152]	; (8001998 <TIM_Base_SetConfig+0x130>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00b      	beq.n	800191a <TIM_Base_SetConfig+0xb2>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a25      	ldr	r2, [pc, #148]	; (800199c <TIM_Base_SetConfig+0x134>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <TIM_Base_SetConfig+0xb2>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <TIM_Base_SetConfig+0x138>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d003      	beq.n	800191a <TIM_Base_SetConfig+0xb2>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a23      	ldr	r2, [pc, #140]	; (80019a4 <TIM_Base_SetConfig+0x13c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d108      	bne.n	800192c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	4313      	orrs	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <TIM_Base_SetConfig+0x114>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d003      	beq.n	8001960 <TIM_Base_SetConfig+0xf8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a0c      	ldr	r2, [pc, #48]	; (800198c <TIM_Base_SetConfig+0x124>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d103      	bne.n	8001968 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	615a      	str	r2, [r3, #20]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40010000 	.word	0x40010000
 8001980:	40000400 	.word	0x40000400
 8001984:	40000800 	.word	0x40000800
 8001988:	40000c00 	.word	0x40000c00
 800198c:	40010400 	.word	0x40010400
 8001990:	40014000 	.word	0x40014000
 8001994:	40014400 	.word	0x40014400
 8001998:	40014800 	.word	0x40014800
 800199c:	40001800 	.word	0x40001800
 80019a0:	40001c00 	.word	0x40001c00
 80019a4:	40002000 	.word	0x40002000

080019a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f023 0307 	bic.w	r3, r3, #7
 80019d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b70      	cmp	r3, #112	; 0x70
 80019f0:	d01a      	beq.n	8001a28 <TIM_SlaveTimer_SetConfig+0x80>
 80019f2:	2b70      	cmp	r3, #112	; 0x70
 80019f4:	d860      	bhi.n	8001ab8 <TIM_SlaveTimer_SetConfig+0x110>
 80019f6:	2b60      	cmp	r3, #96	; 0x60
 80019f8:	d054      	beq.n	8001aa4 <TIM_SlaveTimer_SetConfig+0xfc>
 80019fa:	2b60      	cmp	r3, #96	; 0x60
 80019fc:	d85c      	bhi.n	8001ab8 <TIM_SlaveTimer_SetConfig+0x110>
 80019fe:	2b50      	cmp	r3, #80	; 0x50
 8001a00:	d046      	beq.n	8001a90 <TIM_SlaveTimer_SetConfig+0xe8>
 8001a02:	2b50      	cmp	r3, #80	; 0x50
 8001a04:	d858      	bhi.n	8001ab8 <TIM_SlaveTimer_SetConfig+0x110>
 8001a06:	2b40      	cmp	r3, #64	; 0x40
 8001a08:	d019      	beq.n	8001a3e <TIM_SlaveTimer_SetConfig+0x96>
 8001a0a:	2b40      	cmp	r3, #64	; 0x40
 8001a0c:	d854      	bhi.n	8001ab8 <TIM_SlaveTimer_SetConfig+0x110>
 8001a0e:	2b30      	cmp	r3, #48	; 0x30
 8001a10:	d055      	beq.n	8001abe <TIM_SlaveTimer_SetConfig+0x116>
 8001a12:	2b30      	cmp	r3, #48	; 0x30
 8001a14:	d850      	bhi.n	8001ab8 <TIM_SlaveTimer_SetConfig+0x110>
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d051      	beq.n	8001abe <TIM_SlaveTimer_SetConfig+0x116>
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	d84c      	bhi.n	8001ab8 <TIM_SlaveTimer_SetConfig+0x110>
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d04d      	beq.n	8001abe <TIM_SlaveTimer_SetConfig+0x116>
 8001a22:	2b10      	cmp	r3, #16
 8001a24:	d04b      	beq.n	8001abe <TIM_SlaveTimer_SetConfig+0x116>
 8001a26:	e047      	b.n	8001ab8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68d9      	ldr	r1, [r3, #12]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	f000 f8a6 	bl	8001b88 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8001a3c:	e040      	b.n	8001ac0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	d101      	bne.n	8001a4a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e03b      	b.n	8001ac2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6a1a      	ldr	r2, [r3, #32]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a70:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	621a      	str	r2, [r3, #32]
      break;
 8001a8e:	e017      	b.n	8001ac0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	6899      	ldr	r1, [r3, #8]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f000 f814 	bl	8001aca <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8001aa2:	e00d      	b.n	8001ac0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	6899      	ldr	r1, [r3, #8]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f000 f839 	bl	8001b28 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8001ab6:	e003      	b.n	8001ac0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	75fb      	strb	r3, [r7, #23]
      break;
 8001abc:	e000      	b.n	8001ac0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8001abe:	bf00      	nop
  }

  return status;
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b087      	sub	sp, #28
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f023 0201 	bic.w	r2, r3, #1
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001af4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f023 030a 	bic.w	r3, r3, #10
 8001b06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	621a      	str	r2, [r3, #32]
}
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f023 0210 	bic.w	r2, r3, #16
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	031b      	lsls	r3, r3, #12
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	621a      	str	r2, [r3, #32]
}
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	021a      	lsls	r2, r3, #8
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	609a      	str	r2, [r3, #8]
}
 8001bbc:	bf00      	nop
 8001bbe:	371c      	adds	r7, #28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e05a      	b.n	8001c96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d022      	beq.n	8001c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2c:	d01d      	beq.n	8001c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d018      	beq.n	8001c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1a      	ldr	r2, [pc, #104]	; (8001cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00e      	beq.n	8001c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a18      	ldr	r2, [pc, #96]	; (8001cb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d009      	beq.n	8001c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d004      	beq.n	8001c6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10c      	bne.n	8001c84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	40000800 	.word	0x40000800
 8001cb0:	40000c00 	.word	0x40000c00
 8001cb4:	40010400 	.word	0x40010400
 8001cb8:	40014000 	.word	0x40014000
 8001cbc:	40001800 	.word	0x40001800

08001cc0 <__libc_init_array>:
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	4d0d      	ldr	r5, [pc, #52]	; (8001cf8 <__libc_init_array+0x38>)
 8001cc4:	4c0d      	ldr	r4, [pc, #52]	; (8001cfc <__libc_init_array+0x3c>)
 8001cc6:	1b64      	subs	r4, r4, r5
 8001cc8:	10a4      	asrs	r4, r4, #2
 8001cca:	2600      	movs	r6, #0
 8001ccc:	42a6      	cmp	r6, r4
 8001cce:	d109      	bne.n	8001ce4 <__libc_init_array+0x24>
 8001cd0:	4d0b      	ldr	r5, [pc, #44]	; (8001d00 <__libc_init_array+0x40>)
 8001cd2:	4c0c      	ldr	r4, [pc, #48]	; (8001d04 <__libc_init_array+0x44>)
 8001cd4:	f000 f820 	bl	8001d18 <_init>
 8001cd8:	1b64      	subs	r4, r4, r5
 8001cda:	10a4      	asrs	r4, r4, #2
 8001cdc:	2600      	movs	r6, #0
 8001cde:	42a6      	cmp	r6, r4
 8001ce0:	d105      	bne.n	8001cee <__libc_init_array+0x2e>
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
 8001ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ce8:	4798      	blx	r3
 8001cea:	3601      	adds	r6, #1
 8001cec:	e7ee      	b.n	8001ccc <__libc_init_array+0xc>
 8001cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cf2:	4798      	blx	r3
 8001cf4:	3601      	adds	r6, #1
 8001cf6:	e7f2      	b.n	8001cde <__libc_init_array+0x1e>
 8001cf8:	08001d48 	.word	0x08001d48
 8001cfc:	08001d48 	.word	0x08001d48
 8001d00:	08001d48 	.word	0x08001d48
 8001d04:	08001d4c 	.word	0x08001d4c

08001d08 <memset>:
 8001d08:	4402      	add	r2, r0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d100      	bne.n	8001d12 <memset+0xa>
 8001d10:	4770      	bx	lr
 8001d12:	f803 1b01 	strb.w	r1, [r3], #1
 8001d16:	e7f9      	b.n	8001d0c <memset+0x4>

08001d18 <_init>:
 8001d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1a:	bf00      	nop
 8001d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d1e:	bc08      	pop	{r3}
 8001d20:	469e      	mov	lr, r3
 8001d22:	4770      	bx	lr

08001d24 <_fini>:
 8001d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d26:	bf00      	nop
 8001d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d2a:	bc08      	pop	{r3}
 8001d2c:	469e      	mov	lr, r3
 8001d2e:	4770      	bx	lr
