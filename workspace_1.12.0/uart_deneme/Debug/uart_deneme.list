
uart_deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001738  08001738  00011738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001748  08001748  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001748  08001748  00011748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001750  08001750  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001750  08001750  00011750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001754  08001754  00011754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000040  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003cf8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001141  00000000  00000000  00023d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004e0  00000000  00000000  00024e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000448  00000000  00000000  00025358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef02  00000000  00000000  000257a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000052c1  00000000  00000000  000446a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc1c1  00000000  00000000  00049963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00105b24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011e8  00000000  00000000  00105b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001720 	.word	0x08001720

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001720 	.word	0x08001720

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 f95b 	bl	800078c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f811 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f86d 	bl	80005b8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  uint8_t readData ;
  flashWrite(0x22);
 80004de:	2022      	movs	r0, #34	; 0x22
 80004e0:	f000 f892 	bl	8000608 <flashWrite>
  HAL_Delay(100);
 80004e4:	2064      	movs	r0, #100	; 0x64
 80004e6:	f000 f9c3 	bl	8000870 <HAL_Delay>
  flashRead(FLASH_BASE_ADDR, &readData);
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	4619      	mov	r1, r3
 80004ee:	4802      	ldr	r0, [pc, #8]	; (80004f8 <main+0x2c>)
 80004f0:	f000 f8a8 	bl	8000644 <flashRead>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x28>
 80004f6:	bf00      	nop
 80004f8:	08040000 	.word	0x08040000

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f001 f900 	bl	8001710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <SystemClock_Config+0xb4>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a21      	ldr	r2, [pc, #132]	; (80005b0 <SystemClock_Config+0xb4>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <SystemClock_Config+0xb4>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <SystemClock_Config+0xb8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <SystemClock_Config+0xb8>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <SystemClock_Config+0xb8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2310      	movs	r3, #16
 8000562:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000564:	2300      	movs	r3, #0
 8000566:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0320 	add.w	r3, r7, #32
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fc87 	bl	8000e80 <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000578:	f000 f875 	bl	8000666 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f000 feea 	bl	8001370 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005a2:	f000 f860 	bl	8000666 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3750      	adds	r7, #80	; 0x50
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40007000 	.word	0x40007000

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_GPIO_Init+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800

08000608 <flashWrite>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef flashWrite(uint32_t data)
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000610:	f000 fa8c 	bl	8000b2c <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(FLASH_SECTOR_6, FLASH_VOLTAGE_RANGE_3);
 8000614:	2102      	movs	r1, #2
 8000616:	2006      	movs	r0, #6
 8000618:	f000 fbea 	bl	8000df0 <FLASH_Erase_Sector>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_BASE_ADDR, data);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	461c      	mov	r4, r3
 8000622:	4615      	mov	r5, r2
 8000624:	4622      	mov	r2, r4
 8000626:	462b      	mov	r3, r5
 8000628:	4905      	ldr	r1, [pc, #20]	; (8000640 <flashWrite+0x38>)
 800062a:	2002      	movs	r0, #2
 800062c:	f000 fa2a 	bl	8000a84 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000630:	f000 fa9e 	bl	8000b70 <HAL_FLASH_Lock>

	return HAL_OK ;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bdb0      	pop	{r4, r5, r7, pc}
 800063e:	bf00      	nop
 8000640:	08040000 	.word	0x08040000

08000644 <flashRead>:

HAL_StatusTypeDef flashRead(uint32_t Adress, uint8_t* data)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();
	*data = *(volatile uint32_t *)Adress ;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	b2da      	uxtb	r2, r3
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	701a      	strb	r2, [r3, #0]
	//HAL_FLASH_Lock();
	return HAL_OK ;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066a:	b672      	cpsid	i
}
 800066c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066e:	e7fe      	b.n	800066e <Error_Handler+0x8>

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <HAL_MspInit+0x4c>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <HAL_MspInit+0x4c>)
 8000680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000684:	6453      	str	r3, [r2, #68]	; 0x44
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <HAL_MspInit+0x4c>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_MspInit+0x4c>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <HAL_MspInit+0x4c>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a0:	6413      	str	r3, [r2, #64]	; 0x40
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_MspInit+0x4c>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <NMI_Handler+0x4>

080006c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <HardFault_Handler+0x4>

080006cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <MemManage_Handler+0x4>

080006d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler+0x4>

080006de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070c:	f000 f890 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <SystemInit+0x20>)
 800071a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800071e:	4a05      	ldr	r2, [pc, #20]	; (8000734 <SystemInit+0x20>)
 8000720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000770 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800073e:	490e      	ldr	r1, [pc, #56]	; (8000778 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000740:	4a0e      	ldr	r2, [pc, #56]	; (800077c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000754:	4c0b      	ldr	r4, [pc, #44]	; (8000784 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000762:	f7ff ffd7 	bl	8000714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000766:	f000 ffaf 	bl	80016c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800076a:	f7ff feaf 	bl	80004cc <main>
  bx  lr    
 800076e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800077c:	08001758 	.word	0x08001758
  ldr r2, =_sbss
 8000780:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000784:	2000004c 	.word	0x2000004c

08000788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC_IRQHandler>
	...

0800078c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_Init+0x40>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <HAL_Init+0x40>)
 8000796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800079a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <HAL_Init+0x40>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <HAL_Init+0x40>)
 80007a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_Init+0x40>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a07      	ldr	r2, [pc, #28]	; (80007cc <HAL_Init+0x40>)
 80007ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b4:	2003      	movs	r0, #3
 80007b6:	f000 f931 	bl	8000a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ba:	200f      	movs	r0, #15
 80007bc:	f000 f808 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c0:	f7ff ff56 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023c00 	.word	0x40023c00

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x54>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_InitTick+0x58>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f93b 	bl	8000a6a <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00e      	b.n	800081c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d80a      	bhi.n	800081a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f000 f911 	bl	8000a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <HAL_InitTick+0x5c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e000      	b.n	800081c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000008 	.word	0x20000008
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x20>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x24>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_IncTick+0x24>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000008 	.word	0x20000008
 8000854:	20000028 	.word	0x20000028

08000858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_GetTick+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000028 	.word	0x20000028

08000870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff ffee 	bl	8000858 <HAL_GetTick>
 800087c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000888:	d005      	beq.n	8000896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <HAL_Delay+0x44>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4413      	add	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000896:	bf00      	nop
 8000898:	f7ff ffde 	bl	8000858 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d8f7      	bhi.n	8000898 <HAL_Delay+0x28>
  {
  }
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000008 	.word	0x20000008

080008b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ea:	4a04      	ldr	r2, [pc, #16]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60d3      	str	r3, [r2, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <__NVIC_GetPriorityGrouping+0x18>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	f003 0307 	and.w	r3, r3, #7
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	db0a      	blt.n	8000946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	b2da      	uxtb	r2, r3
 8000934:	490c      	ldr	r1, [pc, #48]	; (8000968 <__NVIC_SetPriority+0x4c>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	0112      	lsls	r2, r2, #4
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	440b      	add	r3, r1
 8000940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000944:	e00a      	b.n	800095c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4908      	ldr	r1, [pc, #32]	; (800096c <__NVIC_SetPriority+0x50>)
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	3b04      	subs	r3, #4
 8000954:	0112      	lsls	r2, r2, #4
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	440b      	add	r3, r1
 800095a:	761a      	strb	r2, [r3, #24]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000970:	b480      	push	{r7}
 8000972:	b089      	sub	sp, #36	; 0x24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f1c3 0307 	rsb	r3, r3, #7
 800098a:	2b04      	cmp	r3, #4
 800098c:	bf28      	it	cs
 800098e:	2304      	movcs	r3, #4
 8000990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3304      	adds	r3, #4
 8000996:	2b06      	cmp	r3, #6
 8000998:	d902      	bls.n	80009a0 <NVIC_EncodePriority+0x30>
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3b03      	subs	r3, #3
 800099e:	e000      	b.n	80009a2 <NVIC_EncodePriority+0x32>
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43da      	mvns	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	401a      	ands	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b8:	f04f 31ff 	mov.w	r1, #4294967295
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	43d9      	mvns	r1, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	4313      	orrs	r3, r2
         );
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3724      	adds	r7, #36	; 0x24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e8:	d301      	bcc.n	80009ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ea:	2301      	movs	r3, #1
 80009ec:	e00f      	b.n	8000a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <SysTick_Config+0x40>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f6:	210f      	movs	r1, #15
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	f7ff ff8e 	bl	800091c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <SysTick_Config+0x40>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SysTick_Config+0x40>)
 8000a08:	2207      	movs	r2, #7
 8000a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff ff47 	bl	80008b8 <__NVIC_SetPriorityGrouping>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	4603      	mov	r3, r0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a44:	f7ff ff5c 	bl	8000900 <__NVIC_GetPriorityGrouping>
 8000a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68b9      	ldr	r1, [r7, #8]
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff ff8e 	bl	8000970 <NVIC_EncodePriority>
 8000a54:	4602      	mov	r2, r0
 8000a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff5d 	bl	800091c <__NVIC_SetPriority>
}
 8000a62:	bf00      	nop
 8000a64:	3718      	adds	r7, #24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff ffb0 	bl	80009d8 <SysTick_Config>
 8000a78:	4603      	mov	r3, r0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000a96:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <HAL_FLASH_Program+0xa0>)
 8000a98:	7e1b      	ldrb	r3, [r3, #24]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d101      	bne.n	8000aa2 <HAL_FLASH_Program+0x1e>
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	e03b      	b.n	8000b1a <HAL_FLASH_Program+0x96>
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_FLASH_Program+0xa0>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000aa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000aac:	f000 f870 	bl	8000b90 <FLASH_WaitForLastOperation>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000ab4:	7dfb      	ldrb	r3, [r7, #23]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d12b      	bne.n	8000b12 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d105      	bne.n	8000acc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000ac0:	783b      	ldrb	r3, [r7, #0]
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	68b8      	ldr	r0, [r7, #8]
 8000ac6:	f000 f91b 	bl	8000d00 <FLASH_Program_Byte>
 8000aca:	e016      	b.n	8000afa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d105      	bne.n	8000ade <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000ad2:	883b      	ldrh	r3, [r7, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	68b8      	ldr	r0, [r7, #8]
 8000ad8:	f000 f8ee 	bl	8000cb8 <FLASH_Program_HalfWord>
 8000adc:	e00d      	b.n	8000afa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d105      	bne.n	8000af0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	68b8      	ldr	r0, [r7, #8]
 8000aea:	f000 f8c3 	bl	8000c74 <FLASH_Program_Word>
 8000aee:	e004      	b.n	8000afa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000af4:	68b8      	ldr	r0, [r7, #8]
 8000af6:	f000 f88b 	bl	8000c10 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000afa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000afe:	f000 f847 	bl	8000b90 <FLASH_WaitForLastOperation>
 8000b02:	4603      	mov	r3, r0
 8000b04:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_FLASH_Program+0xa4>)
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_FLASH_Program+0xa4>)
 8000b0c:	f023 0301 	bic.w	r3, r3, #1
 8000b10:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <HAL_FLASH_Program+0xa0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000002c 	.word	0x2000002c
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_FLASH_Unlock+0x38>)
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	da0b      	bge.n	8000b56 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_FLASH_Unlock+0x38>)
 8000b40:	4a09      	ldr	r2, [pc, #36]	; (8000b68 <HAL_FLASH_Unlock+0x3c>)
 8000b42:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_FLASH_Unlock+0x38>)
 8000b46:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <HAL_FLASH_Unlock+0x40>)
 8000b48:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_FLASH_Unlock+0x38>)
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	da01      	bge.n	8000b56 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40023c00 	.word	0x40023c00
 8000b68:	45670123 	.word	0x45670123
 8000b6c:	cdef89ab 	.word	0xcdef89ab

08000b70 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_FLASH_Lock+0x1c>)
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_FLASH_Lock+0x1c>)
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <FLASH_WaitForLastOperation+0x78>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000ba2:	f7ff fe59 	bl	8000858 <HAL_GetTick>
 8000ba6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000ba8:	e010      	b.n	8000bcc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb0:	d00c      	beq.n	8000bcc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d007      	beq.n	8000bc8 <FLASH_WaitForLastOperation+0x38>
 8000bb8:	f7ff fe4e 	bl	8000858 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d201      	bcs.n	8000bcc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e019      	b.n	8000c00 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <FLASH_WaitForLastOperation+0x7c>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1e8      	bne.n	8000baa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <FLASH_WaitForLastOperation+0x7c>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <FLASH_WaitForLastOperation+0x7c>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <FLASH_WaitForLastOperation+0x7c>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000bf6:	f000 f8a5 	bl	8000d44 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
  
}  
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000002c 	.word	0x2000002c
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <FLASH_Program_DoubleWord+0x60>)
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <FLASH_Program_DoubleWord+0x60>)
 8000c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <FLASH_Program_DoubleWord+0x60>)
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <FLASH_Program_DoubleWord+0x60>)
 8000c2e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <FLASH_Program_DoubleWord+0x60>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <FLASH_Program_DoubleWord+0x60>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000c46:	f3bf 8f6f 	isb	sy
}
 8000c4a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c50:	f04f 0200 	mov.w	r2, #0
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	000a      	movs	r2, r1
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	68f9      	ldr	r1, [r7, #12]
 8000c5e:	3104      	adds	r1, #4
 8000c60:	4613      	mov	r3, r2
 8000c62:	600b      	str	r3, [r1, #0]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <FLASH_Program_Word+0x40>)
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	4a0c      	ldr	r2, [pc, #48]	; (8000cb4 <FLASH_Program_Word+0x40>)
 8000c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <FLASH_Program_Word+0x40>)
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <FLASH_Program_Word+0x40>)
 8000c90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <FLASH_Program_Word+0x40>)
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <FLASH_Program_Word+0x40>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <FLASH_Program_HalfWord+0x44>)
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <FLASH_Program_HalfWord+0x44>)
 8000cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <FLASH_Program_HalfWord+0x44>)
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <FLASH_Program_HalfWord+0x44>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <FLASH_Program_HalfWord+0x44>)
 8000cde:	691b      	ldr	r3, [r3, #16]
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <FLASH_Program_HalfWord+0x44>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	801a      	strh	r2, [r3, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <FLASH_Program_Byte+0x40>)
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <FLASH_Program_Byte+0x40>)
 8000d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <FLASH_Program_Byte+0x40>)
 8000d1a:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <FLASH_Program_Byte+0x40>)
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <FLASH_Program_Byte+0x40>)
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <FLASH_Program_Byte+0x40>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	78fa      	ldrb	r2, [r7, #3]
 8000d30:	701a      	strb	r2, [r3, #0]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <FLASH_SetErrorCode+0xa4>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d008      	beq.n	8000d66 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <FLASH_SetErrorCode+0xa8>)
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	4a23      	ldr	r2, [pc, #140]	; (8000dec <FLASH_SetErrorCode+0xa8>)
 8000d5e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <FLASH_SetErrorCode+0xa4>)
 8000d62:	2210      	movs	r2, #16
 8000d64:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <FLASH_SetErrorCode+0xa4>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f003 0320 	and.w	r3, r3, #32
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d008      	beq.n	8000d84 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <FLASH_SetErrorCode+0xa8>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f043 0308 	orr.w	r3, r3, #8
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <FLASH_SetErrorCode+0xa8>)
 8000d7c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <FLASH_SetErrorCode+0xa4>)
 8000d80:	2220      	movs	r2, #32
 8000d82:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <FLASH_SetErrorCode+0xa4>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d008      	beq.n	8000da2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <FLASH_SetErrorCode+0xa8>)
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <FLASH_SetErrorCode+0xa8>)
 8000d9a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <FLASH_SetErrorCode+0xa4>)
 8000d9e:	2240      	movs	r2, #64	; 0x40
 8000da0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <FLASH_SetErrorCode+0xa4>)
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d008      	beq.n	8000dc0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <FLASH_SetErrorCode+0xa8>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <FLASH_SetErrorCode+0xa8>)
 8000db8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <FLASH_SetErrorCode+0xa4>)
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <FLASH_SetErrorCode+0xa4>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d008      	beq.n	8000dde <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <FLASH_SetErrorCode+0xa8>)
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	f043 0320 	orr.w	r3, r3, #32
 8000dd4:	4a05      	ldr	r2, [pc, #20]	; (8000dec <FLASH_SetErrorCode+0xa8>)
 8000dd6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <FLASH_SetErrorCode+0xa4>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	60da      	str	r2, [r3, #12]
  }
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	40023c00 	.word	0x40023c00
 8000dec:	2000002c 	.word	0x2000002c

08000df0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	e010      	b.n	8000e2e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d103      	bne.n	8000e1a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	e009      	b.n	8000e2e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d103      	bne.n	8000e28 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8000e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	e002      	b.n	8000e2e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000e28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <FLASH_Erase_Sector+0x8c>)
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <FLASH_Erase_Sector+0x8c>)
 8000e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <FLASH_Erase_Sector+0x8c>)
 8000e3c:	691a      	ldr	r2, [r3, #16]
 8000e3e:	490f      	ldr	r1, [pc, #60]	; (8000e7c <FLASH_Erase_Sector+0x8c>)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <FLASH_Erase_Sector+0x8c>)
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <FLASH_Erase_Sector+0x8c>)
 8000e4c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <FLASH_Erase_Sector+0x8c>)
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <FLASH_Erase_Sector+0x8c>)
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <FLASH_Erase_Sector+0x8c>)
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <FLASH_Erase_Sector+0x8c>)
 8000e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6e:	6113      	str	r3, [r2, #16]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e267      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d075      	beq.n	8000f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e9e:	4b88      	ldr	r3, [pc, #544]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d00c      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eaa:	4b85      	ldr	r3, [pc, #532]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d112      	bne.n	8000edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eb6:	4b82      	ldr	r3, [pc, #520]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ec2:	d10b      	bne.n	8000edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec4:	4b7e      	ldr	r3, [pc, #504]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d05b      	beq.n	8000f88 <HAL_RCC_OscConfig+0x108>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d157      	bne.n	8000f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e242      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee4:	d106      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x74>
 8000ee6:	4b76      	ldr	r3, [pc, #472]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a75      	ldr	r2, [pc, #468]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e01d      	b.n	8000f30 <HAL_RCC_OscConfig+0xb0>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000efc:	d10c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x98>
 8000efe:	4b70      	ldr	r3, [pc, #448]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a6f      	ldr	r2, [pc, #444]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b6d      	ldr	r3, [pc, #436]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a6c      	ldr	r2, [pc, #432]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e00b      	b.n	8000f30 <HAL_RCC_OscConfig+0xb0>
 8000f18:	4b69      	ldr	r3, [pc, #420]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a68      	ldr	r2, [pc, #416]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b66      	ldr	r3, [pc, #408]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a65      	ldr	r2, [pc, #404]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d013      	beq.n	8000f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fc8e 	bl	8000858 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fc8a 	bl	8000858 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e207      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f52:	4b5b      	ldr	r3, [pc, #364]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f0      	beq.n	8000f40 <HAL_RCC_OscConfig+0xc0>
 8000f5e:	e014      	b.n	8000f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f60:	f7ff fc7a 	bl	8000858 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f68:	f7ff fc76 	bl	8000858 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b64      	cmp	r3, #100	; 0x64
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e1f3      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7a:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f0      	bne.n	8000f68 <HAL_RCC_OscConfig+0xe8>
 8000f86:	e000      	b.n	8000f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d063      	beq.n	800105e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f96:	4b4a      	ldr	r3, [pc, #296]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00b      	beq.n	8000fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d11c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d116      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fba:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x152>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d001      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e1c7      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	4937      	ldr	r1, [pc, #220]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe6:	e03a      	b.n	800105e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d020      	beq.n	8001032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ff0:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <HAL_RCC_OscConfig+0x244>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fc2f 	bl	8000858 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffe:	f7ff fc2b 	bl	8000858 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e1a8      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f0      	beq.n	8000ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	4925      	ldr	r1, [pc, #148]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 800102c:	4313      	orrs	r3, r2
 800102e:	600b      	str	r3, [r1, #0]
 8001030:	e015      	b.n	800105e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_RCC_OscConfig+0x244>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001038:	f7ff fc0e 	bl	8000858 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001040:	f7ff fc0a 	bl	8000858 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e187      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	2b00      	cmp	r3, #0
 8001068:	d036      	beq.n	80010d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d016      	beq.n	80010a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_RCC_OscConfig+0x248>)
 8001074:	2201      	movs	r2, #1
 8001076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001078:	f7ff fbee 	bl	8000858 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001080:	f7ff fbea 	bl	8000858 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e167      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_RCC_OscConfig+0x240>)
 8001094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f0      	beq.n	8001080 <HAL_RCC_OscConfig+0x200>
 800109e:	e01b      	b.n	80010d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_RCC_OscConfig+0x248>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a6:	f7ff fbd7 	bl	8000858 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ac:	e00e      	b.n	80010cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ae:	f7ff fbd3 	bl	8000858 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d907      	bls.n	80010cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e150      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
 80010c0:	40023800 	.word	0x40023800
 80010c4:	42470000 	.word	0x42470000
 80010c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010cc:	4b88      	ldr	r3, [pc, #544]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 80010ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1ea      	bne.n	80010ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 8097 	beq.w	8001214 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ea:	4b81      	ldr	r3, [pc, #516]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10f      	bne.n	8001116 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b7d      	ldr	r3, [pc, #500]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a7c      	ldr	r2, [pc, #496]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b7a      	ldr	r3, [pc, #488]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001112:	2301      	movs	r3, #1
 8001114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001116:	4b77      	ldr	r3, [pc, #476]	; (80012f4 <HAL_RCC_OscConfig+0x474>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111e:	2b00      	cmp	r3, #0
 8001120:	d118      	bne.n	8001154 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001122:	4b74      	ldr	r3, [pc, #464]	; (80012f4 <HAL_RCC_OscConfig+0x474>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a73      	ldr	r2, [pc, #460]	; (80012f4 <HAL_RCC_OscConfig+0x474>)
 8001128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800112e:	f7ff fb93 	bl	8000858 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001136:	f7ff fb8f 	bl	8000858 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e10c      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001148:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <HAL_RCC_OscConfig+0x474>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d106      	bne.n	800116a <HAL_RCC_OscConfig+0x2ea>
 800115c:	4b64      	ldr	r3, [pc, #400]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 800115e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001160:	4a63      	ldr	r2, [pc, #396]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6713      	str	r3, [r2, #112]	; 0x70
 8001168:	e01c      	b.n	80011a4 <HAL_RCC_OscConfig+0x324>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b05      	cmp	r3, #5
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0x30c>
 8001172:	4b5f      	ldr	r3, [pc, #380]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 8001174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001176:	4a5e      	ldr	r2, [pc, #376]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6713      	str	r3, [r2, #112]	; 0x70
 800117e:	4b5c      	ldr	r3, [pc, #368]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 8001180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001182:	4a5b      	ldr	r2, [pc, #364]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6713      	str	r3, [r2, #112]	; 0x70
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0x324>
 800118c:	4b58      	ldr	r3, [pc, #352]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 800118e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001190:	4a57      	ldr	r2, [pc, #348]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 8001192:	f023 0301 	bic.w	r3, r3, #1
 8001196:	6713      	str	r3, [r2, #112]	; 0x70
 8001198:	4b55      	ldr	r3, [pc, #340]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 800119a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119c:	4a54      	ldr	r2, [pc, #336]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 800119e:	f023 0304 	bic.w	r3, r3, #4
 80011a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d015      	beq.n	80011d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ac:	f7ff fb54 	bl	8000858 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b2:	e00a      	b.n	80011ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b4:	f7ff fb50 	bl	8000858 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e0cb      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ca:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 80011cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0ee      	beq.n	80011b4 <HAL_RCC_OscConfig+0x334>
 80011d6:	e014      	b.n	8001202 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d8:	f7ff fb3e 	bl	8000858 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011de:	e00a      	b.n	80011f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e0:	f7ff fb3a 	bl	8000858 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e0b5      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f6:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 80011f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1ee      	bne.n	80011e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d105      	bne.n	8001214 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001208:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	4a38      	ldr	r2, [pc, #224]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 800120e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80a1 	beq.w	8001360 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800121e:	4b34      	ldr	r3, [pc, #208]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b08      	cmp	r3, #8
 8001228:	d05c      	beq.n	80012e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d141      	bne.n	80012b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001232:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <HAL_RCC_OscConfig+0x478>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fb0e 	bl	8000858 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001240:	f7ff fb0a 	bl	8000858 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e087      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69da      	ldr	r2, [r3, #28]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	019b      	lsls	r3, r3, #6
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	085b      	lsrs	r3, r3, #1
 8001276:	3b01      	subs	r3, #1
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	061b      	lsls	r3, r3, #24
 8001282:	491b      	ldr	r1, [pc, #108]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <HAL_RCC_OscConfig+0x478>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff fae3 	bl	8000858 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001296:	f7ff fadf 	bl	8000858 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e05c      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x416>
 80012b4:	e054      	b.n	8001360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_RCC_OscConfig+0x478>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff facc 	bl	8000858 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c4:	f7ff fac8 	bl	8000858 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e045      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_RCC_OscConfig+0x470>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x444>
 80012e2:	e03d      	b.n	8001360 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d107      	bne.n	80012fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e038      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40007000 	.word	0x40007000
 80012f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <HAL_RCC_OscConfig+0x4ec>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d028      	beq.n	800135c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001314:	429a      	cmp	r2, r3
 8001316:	d121      	bne.n	800135c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001322:	429a      	cmp	r2, r3
 8001324:	d11a      	bne.n	800135c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800132c:	4013      	ands	r3, r2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001334:	4293      	cmp	r3, r2
 8001336:	d111      	bne.n	800135c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	085b      	lsrs	r3, r3, #1
 8001344:	3b01      	subs	r3, #1
 8001346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001348:	429a      	cmp	r2, r3
 800134a:	d107      	bne.n	800135c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001358:	429a      	cmp	r2, r3
 800135a:	d001      	beq.n	8001360 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0cc      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001384:	4b68      	ldr	r3, [pc, #416]	; (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d90c      	bls.n	80013ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b65      	ldr	r3, [pc, #404]	; (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800139a:	4b63      	ldr	r3, [pc, #396]	; (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0b8      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d020      	beq.n	80013fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013c4:	4b59      	ldr	r3, [pc, #356]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	4a58      	ldr	r2, [pc, #352]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a52      	ldr	r2, [pc, #328]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013e8:	4b50      	ldr	r3, [pc, #320]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	494d      	ldr	r1, [pc, #308]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d044      	beq.n	8001490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d107      	bne.n	800141e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b47      	ldr	r3, [pc, #284]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d119      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e07f      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d003      	beq.n	800142e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800142a:	2b03      	cmp	r3, #3
 800142c:	d107      	bne.n	800143e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142e:	4b3f      	ldr	r3, [pc, #252]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d109      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e06f      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	4b3b      	ldr	r3, [pc, #236]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e067      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f023 0203 	bic.w	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4934      	ldr	r1, [pc, #208]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 800145c:	4313      	orrs	r3, r2
 800145e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001460:	f7ff f9fa 	bl	8000858 <HAL_GetTick>
 8001464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001466:	e00a      	b.n	800147e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001468:	f7ff f9f6 	bl	8000858 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f241 3288 	movw	r2, #5000	; 0x1388
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e04f      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 020c 	and.w	r2, r3, #12
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	429a      	cmp	r2, r3
 800148e:	d1eb      	bne.n	8001468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d20c      	bcs.n	80014b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_RCC_ClockConfig+0x1b8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e032      	b.n	800151e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4916      	ldr	r1, [pc, #88]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d009      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	490e      	ldr	r1, [pc, #56]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014f6:	f000 f821 	bl	800153c <HAL_RCC_GetSysClockFreq>
 80014fa:	4602      	mov	r2, r0
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	490a      	ldr	r1, [pc, #40]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	5ccb      	ldrb	r3, [r1, r3]
 800150a:	fa22 f303 	lsr.w	r3, r2, r3
 800150e:	4a09      	ldr	r2, [pc, #36]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_RCC_ClockConfig+0x1c8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f95a 	bl	80007d0 <HAL_InitTick>

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023c00 	.word	0x40023c00
 800152c:	40023800 	.word	0x40023800
 8001530:	08001738 	.word	0x08001738
 8001534:	20000000 	.word	0x20000000
 8001538:	20000004 	.word	0x20000004

0800153c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800153c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001540:	b090      	sub	sp, #64	; 0x40
 8001542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800154c:	2300      	movs	r3, #0
 800154e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001554:	4b59      	ldr	r3, [pc, #356]	; (80016bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b08      	cmp	r3, #8
 800155e:	d00d      	beq.n	800157c <HAL_RCC_GetSysClockFreq+0x40>
 8001560:	2b08      	cmp	r3, #8
 8001562:	f200 80a1 	bhi.w	80016a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0x34>
 800156a:	2b04      	cmp	r3, #4
 800156c:	d003      	beq.n	8001576 <HAL_RCC_GetSysClockFreq+0x3a>
 800156e:	e09b      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001570:	4b53      	ldr	r3, [pc, #332]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001572:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001574:	e09b      	b.n	80016ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001576:	4b53      	ldr	r3, [pc, #332]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001578:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800157a:	e098      	b.n	80016ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800157c:	4b4f      	ldr	r3, [pc, #316]	; (80016bc <HAL_RCC_GetSysClockFreq+0x180>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001586:	4b4d      	ldr	r3, [pc, #308]	; (80016bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d028      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001592:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	099b      	lsrs	r3, r3, #6
 8001598:	2200      	movs	r2, #0
 800159a:	623b      	str	r3, [r7, #32]
 800159c:	627a      	str	r2, [r7, #36]	; 0x24
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015a4:	2100      	movs	r1, #0
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80015a8:	fb03 f201 	mul.w	r2, r3, r1
 80015ac:	2300      	movs	r3, #0
 80015ae:	fb00 f303 	mul.w	r3, r0, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	4a43      	ldr	r2, [pc, #268]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80015b6:	fba0 1202 	umull	r1, r2, r0, r2
 80015ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015bc:	460a      	mov	r2, r1
 80015be:	62ba      	str	r2, [r7, #40]	; 0x28
 80015c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c2:	4413      	add	r3, r2
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c8:	2200      	movs	r2, #0
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	61fa      	str	r2, [r7, #28]
 80015ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015d6:	f7fe fdf7 	bl	80001c8 <__aeabi_uldivmod>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4613      	mov	r3, r2
 80015e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015e2:	e053      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e4:	4b35      	ldr	r3, [pc, #212]	; (80016bc <HAL_RCC_GetSysClockFreq+0x180>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	099b      	lsrs	r3, r3, #6
 80015ea:	2200      	movs	r2, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	617a      	str	r2, [r7, #20]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80015f6:	f04f 0b00 	mov.w	fp, #0
 80015fa:	4652      	mov	r2, sl
 80015fc:	465b      	mov	r3, fp
 80015fe:	f04f 0000 	mov.w	r0, #0
 8001602:	f04f 0100 	mov.w	r1, #0
 8001606:	0159      	lsls	r1, r3, #5
 8001608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800160c:	0150      	lsls	r0, r2, #5
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	ebb2 080a 	subs.w	r8, r2, sl
 8001616:	eb63 090b 	sbc.w	r9, r3, fp
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001626:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800162a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800162e:	ebb2 0408 	subs.w	r4, r2, r8
 8001632:	eb63 0509 	sbc.w	r5, r3, r9
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	00eb      	lsls	r3, r5, #3
 8001640:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001644:	00e2      	lsls	r2, r4, #3
 8001646:	4614      	mov	r4, r2
 8001648:	461d      	mov	r5, r3
 800164a:	eb14 030a 	adds.w	r3, r4, sl
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	eb45 030b 	adc.w	r3, r5, fp
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001662:	4629      	mov	r1, r5
 8001664:	028b      	lsls	r3, r1, #10
 8001666:	4621      	mov	r1, r4
 8001668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800166c:	4621      	mov	r1, r4
 800166e:	028a      	lsls	r2, r1, #10
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001676:	2200      	movs	r2, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	60fa      	str	r2, [r7, #12]
 800167c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001680:	f7fe fda2 	bl	80001c8 <__aeabi_uldivmod>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4613      	mov	r3, r2
 800168a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_RCC_GetSysClockFreq+0x180>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	3301      	adds	r3, #1
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800169c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016a6:	e002      	b.n	80016ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80016aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3740      	adds	r7, #64	; 0x40
 80016b4:	46bd      	mov	sp, r7
 80016b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	00f42400 	.word	0x00f42400
 80016c4:	017d7840 	.word	0x017d7840

080016c8 <__libc_init_array>:
 80016c8:	b570      	push	{r4, r5, r6, lr}
 80016ca:	4d0d      	ldr	r5, [pc, #52]	; (8001700 <__libc_init_array+0x38>)
 80016cc:	4c0d      	ldr	r4, [pc, #52]	; (8001704 <__libc_init_array+0x3c>)
 80016ce:	1b64      	subs	r4, r4, r5
 80016d0:	10a4      	asrs	r4, r4, #2
 80016d2:	2600      	movs	r6, #0
 80016d4:	42a6      	cmp	r6, r4
 80016d6:	d109      	bne.n	80016ec <__libc_init_array+0x24>
 80016d8:	4d0b      	ldr	r5, [pc, #44]	; (8001708 <__libc_init_array+0x40>)
 80016da:	4c0c      	ldr	r4, [pc, #48]	; (800170c <__libc_init_array+0x44>)
 80016dc:	f000 f820 	bl	8001720 <_init>
 80016e0:	1b64      	subs	r4, r4, r5
 80016e2:	10a4      	asrs	r4, r4, #2
 80016e4:	2600      	movs	r6, #0
 80016e6:	42a6      	cmp	r6, r4
 80016e8:	d105      	bne.n	80016f6 <__libc_init_array+0x2e>
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
 80016ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f0:	4798      	blx	r3
 80016f2:	3601      	adds	r6, #1
 80016f4:	e7ee      	b.n	80016d4 <__libc_init_array+0xc>
 80016f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016fa:	4798      	blx	r3
 80016fc:	3601      	adds	r6, #1
 80016fe:	e7f2      	b.n	80016e6 <__libc_init_array+0x1e>
 8001700:	08001750 	.word	0x08001750
 8001704:	08001750 	.word	0x08001750
 8001708:	08001750 	.word	0x08001750
 800170c:	08001754 	.word	0x08001754

08001710 <memset>:
 8001710:	4402      	add	r2, r0
 8001712:	4603      	mov	r3, r0
 8001714:	4293      	cmp	r3, r2
 8001716:	d100      	bne.n	800171a <memset+0xa>
 8001718:	4770      	bx	lr
 800171a:	f803 1b01 	strb.w	r1, [r3], #1
 800171e:	e7f9      	b.n	8001714 <memset+0x4>

08001720 <_init>:
 8001720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001722:	bf00      	nop
 8001724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001726:	bc08      	pop	{r3}
 8001728:	469e      	mov	lr, r3
 800172a:	4770      	bx	lr

0800172c <_fini>:
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172e:	bf00      	nop
 8001730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001732:	bc08      	pop	{r3}
 8001734:	469e      	mov	lr, r3
 8001736:	4770      	bx	lr
